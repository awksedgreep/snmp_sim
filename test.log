[warning] Compiling obsolete MIB "IPV6-TC"... This may not work. Please see RFC 8096 at https://tools.ietf.org/html/rfc8096 for details
IPV6-TC.mib: 5: TEXTUAL-CONVENTION is only allowed in SNMPv2.
IPV6-TC.mib: 8: syntax error before: 'TEXTUAL-CONVENTION'
UCD-SNMP-MIB.mib: 778: Number of columns differs from SEQUENCE definition (object:dskTotalLow).
UCD-SNMP-MIB.mib: 787: Number of columns differs from SEQUENCE definition (object:dskTotalHigh).
UCD-SNMP-MIB.mib: 796: Number of columns differs from SEQUENCE definition (object:dskAvailLow).
UCD-SNMP-MIB.mib: 805: Number of columns differs from SEQUENCE definition (object:dskAvailHigh).
UCD-SNMP-MIB.mib: 814: Number of columns differs from SEQUENCE definition (object:dskUsedLow).
UCD-SNMP-MIB.mib: 823: Number of columns differs from SEQUENCE definition (object:dskUsedHigh).
UCD-SNMP-MIB.mib: 850: Number of columns differs from SEQUENCE definition (object:laTable).
UCD-SNMP-MIB.mib: 858: Number of columns differs from SEQUENCE definition (object:laEntry).
UCD-SNMP-MIB.mib: 867: Corrupt table definition.
UCD-SNMP-MIB.mib: 878: OBJECT IDENTIFIER [laIndex] defined in terms of undefined parent object. Parent: 'laEntry'.(Sub-indexes: [1].)
UCD-SNMP-MIB.mib: 886: OBJECT IDENTIFIER [laNames] defined in terms of undefined parent object. Parent: 'laEntry'.(Sub-indexes: [2].)
UCD-SNMP-MIB.mib: 894: OBJECT IDENTIFIER [laLoad] defined in terms of undefined parent object. Parent: 'laEntry'.(Sub-indexes: [3].)
UCD-SNMP-MIB.mib: 902: OBJECT IDENTIFIER [laConfig] defined in terms of undefined parent object. Parent: 'laEntry'.(Sub-indexes: [4].)
UCD-SNMP-MIB.mib: 912: OBJECT IDENTIFIER [laLoadInt] defined in terms of undefined parent object. Parent: 'laEntry'.(Sub-indexes: [5].)
UCD-SNMP-MIB.mib: 923: OBJECT IDENTIFIER [laLoadFloat] defined in terms of undefined parent object. Parent: 'laEntry'.(Sub-indexes: [6].)
UCD-SNMP-MIB.mib: 932: OBJECT IDENTIFIER [laErrorFlag] defined in terms of undefined parent object. Parent: 'laEntry'.(Sub-indexes: [100].)
UCD-SNMP-MIB.mib: 942: OBJECT IDENTIFIER [laErrMessage] defined in terms of undefined parent object. Parent: 'laEntry'.(Sub-indexes: [101].)
UCD-SNMP-MIB.mib: Multiple used object with OBJECT IDENTIFIER '[99,99]'. Used in 'laIndex' and 'laNames'.
[warning] Compiling obsolete MIB "IPV6-MIB"... This may not work. Please see RFC 8096 at https://tools.ietf.org/html/rfc8096 for details
IPV6-MIB.mib: 13: Could not import [{type,'Ipv6IfIndex'},
                                    {type,'Ipv6Address'},
                                    {type,'Ipv6AddressPrefix'},
                                    {type,'Ipv6AddressIfIdentifier'},
                                    {type,'Ipv6IfIndexOrZero'}] from mib IPV6-TC.bin. File not found. Check that the MIB to be IMPORTED is compiled and present in the import path.
[warning] Compiling obsolete MIB "IPV6-TCP-MIB"... This may not work. Please see RFC 8096 at https://tools.ietf.org/html/rfc8096 for details
IPV6-TCP-MIB.mib: 7: Could not import [{type,'Ipv6Address'},
                                       {type,'Ipv6IfIndexOrZero'}] from mib IPV6-TC.bin. File not found. Check that the MIB to be IMPORTED is compiled and present in the import path.
[warning] Compiling obsolete MIB "IPV6-UDP-MIB"... This may not work. Please see RFC 8096 at https://tools.ietf.org/html/rfc8096 for details
IPV6-UDP-MIB.mib: 7: Could not import [{type,'Ipv6Address'},
                                       {type,'Ipv6IfIndexOrZero'}] from mib IPV6-TC.bin. File not found. Check that the MIB to be IMPORTED is compiled and present in the import path.
UCD-DEMO-MIB.mib: 5: Could not import [{node,ucdavis}] from mib UCD-SNMP-MIB.bin. File not found. Check that the MIB to be IMPORTED is compiled and present in the import path.
UCD-DISKIO-MIB.mib: 17: Could not import [{node,ucdExperimental}] from mib UCD-SNMP-MIB.bin. File not found. Check that the MIB to be IMPORTED is compiled and present in the import path.
UCD-DLMOD-MIB.mib: 11: Could not import [{node,ucdExperimental}] from mib UCD-SNMP-MIB.bin. File not found. Check that the MIB to be IMPORTED is compiled and present in the import path.
UCD-IPFWACC-MIB.mib: 9: Could not import [{node,ucdExperimental}] from mib UCD-SNMP-MIB.bin. File not found. Check that the MIB to be IMPORTED is compiled and present in the import path.
DISMAN-EVENT-MIB.mib: 548: Corrupt table definition.
DISMAN-EVENT-MIB.mib: Table 'mteTriggerDeltaTable' must have at least one accessible column.
[warning] Compiling obsolete MIB "IPV6-ICMP-MIB"... This may not work. Please see RFC 8096 at https://tools.ietf.org/html/rfc8096 for details
IPV6-ICMP-MIB.mib: 7: Could not import [{node,ipv6IfEntry}] from mib IPV6-MIB.bin. File not found. Check that the MIB to be IMPORTED is compiled and present in the import path.
    warning: using single-quoted strings to represent charlists is deprecated.
    Use ~c"" if you indeed want a charlist or use "" instead.
    You may run "mix format --migrate" to change all single-quoted
    strings to use the ~c sigil and fix this warning.
    │
 20 │   {:config, [{:dir, '/tmp'}, {:log_type, :none}]},
    │                     ~
    │
    └─ test/test_helper.exs:20:21

    warning: using single-quoted strings to represent charlists is deprecated.
    Use ~c"" if you indeed want a charlist or use "" instead.
    You may run "mix format --migrate" to change all single-quoted
    strings to use the ~c sigil and fix this warning.
    │
 30 │   {:config, [{:dir, '/tmp'}, {:log_type, :none}]},
    │                     ~
    │
    └─ test/test_helper.exs:30:21

Running ExUnit with seed: 917118, max_cases: 1
Excluding tags: [:shell_integration, :slow, :erlang, :optional, :snmp_ex_integration]
Including tags: [:unit]

     warning: variable "walked_oids" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 288 │       walked_oids = []
     │       ~~~~~~~~~~~
     │
     └─ test/snmp_sim_snmp_ex_integration_test.exs:288:7: SnmpSimSnmpExIntegrationTest."test Integration with snmp_ex Library snmp_ex handles lexicographic ordering correctly"/1

     warning: variable "version" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 510 │       for {version, test_agent} <- [v1: v1_agent, v2c: v2c_agent] do
     │            ~
     │
     └─ test/snmp_sim_snmp_ex_integration_test.exs:510:12: SnmpSimSnmpExIntegrationTest."test Protocol Compliance and Edge Cases snmp_ex handles SNMPv1 vs v2c correctly"/1

    warning: unused alias Server
    │
 12 │   alias SnmpSim.Core.Server
    │   ~
    │
    └─ test/snmp_sim/snmp_regression_test.exs:12:3

    warning: unused alias LazyDevicePool
    │
  7 │   alias SnmpSim.{LazyDevicePool}
    │   ~
    │
    └─ test/snmp_sim/error_injector_test.exs:7:3

    warning: variable "behavior" is unused (there is a variable with the same name in the context, use the pin operator (^) to match on it or prefix this variable with underscore if it is not meant to be used)
    │
 45 │       assert {:ok, {:counter32, 1_234_567}, behavior} =
    │                                             ~~~~~~~~
    │
    └─ test/snmp_sim/oid_tree_test.exs:45:45: SnmpSim.OIDTreeTest."test OID Tree Creation and Basic Operations inserts OID with behavior information"/1

    warning: variable "profile" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 29 │       {:ok, profile} =
    │             ~~~~~~~
    │
    └─ test/snmp_sim_erlang_snmp_integration_simple_test.exs:29:13: SnmpSimErlangSnmpIntegrationSimpleTest.__ex_unit_setup_0_0/1

     warning: variable "count" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 288 │       count = 0
     │       ~~~~~
     │
     └─ test/snmp_sim/oid_tree_test.exs:288:7: SnmpSim.OIDTreeTest."test Performance with Large OID Trees GETNEXT traversal is efficient on large trees"/1

    warning: variable "target_name" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 50 │       target_name = "target_#{port}_#{:rand.uniform(100_000)}"
    │       ~~~~~~~~~~~
    │
    └─ test/snmp_sim_erlang_snmp_integration_simple_test.exs:50:7: SnmpSimErlangSnmpIntegrationSimpleTest.__ex_unit_setup_0_0/1

     warning: variable "iterations" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 103 │       iterations = 0
     │       ~~~~~~~~~~
     │
     └─ test/snmp_sim/getbulk_end_of_mib_simple_test.exs:103:7: SnmpSim.GetbulkEndOfMibSimpleTest."test Core GETBULK end-of-MIB fixes get_bulk_oids simulates complete walk without infinite loops"/1

     warning: variable "value" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 204 │       for {oid, type, value} <- bulk_oids do
     │                       ~
     │
     └─ test/snmp_sim/getbulk_end_of_mib_simple_test.exs:204:23: SnmpSim.GetbulkEndOfMibSimpleTest."test Edge cases large GETBULK requests don't cause issues"/1

    warning: unused alias ProfileLoader
    │
 14 │   alias SnmpSim.ProfileLoader
    │   ~
    │
    └─ test/snmp_sim_snmp_ex_integration_test.exs:14:3

    warning: unused alias Server
    │
 20 │   alias SnmpSim.{Device, LazyDevicePool, Core.Server}
    │   ~
    │
    └─ test/snmp_sim_stability_test.exs:20:3

    warning: default values for the optional arguments in get_test_port_range/2 are never used
    │
 30 │   defp get_test_port_range(_test_name, size \\ 100) do
    │        ~
    │
    └─ test/snmp_sim/performance/performance_test.exs:30:8: SnmpSim.Performance.PerformanceTest (module)

     warning: function create_devices_up_to_limit/2 is unused
     │
 499 │   defp create_devices_up_to_limit(attempt_count, start_port) do
     │        ~
     │
     └─ test/snmp_sim/performance/performance_test.exs:499:8: SnmpSim.Performance.PerformanceTest (module)

warning: 1000..999 has a default step of -1, please write 1000..999//-1 instead
  test/snmp_sim/device_distribution_test.exs:341: SnmpSim.DeviceDistributionTest."test port assignment validation detects invalid ranges"/1

    warning: variable "profile" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 49 │       {:ok, profile} =
    │             ~~~~~~~
    │
    └─ test/snmp_sim_integration_test.exs:49:13: SnmpSimIntegrationTest."test End-to-End Device Simulation loads profile and starts device successfully"/1

    warning: variable "profile" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 86 │       {:ok, profile} =
    │             ~~~~~~~
    │
    └─ test/snmp_sim_integration_test.exs:86:13: SnmpSimIntegrationTest."test End-to-End Device Simulation handles GETNEXT operations correctly"/1

     warning: variable "profile" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 120 │       {:ok, profile} =
     │             ~~~~~~~
     │
     └─ test/snmp_sim_integration_test.exs:120:13: SnmpSimIntegrationTest."test End-to-End Device Simulation responds with proper error for non-existent OIDs"/1

     warning: variable "profile" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 189 │       {:ok, profile} =
     │             ~~~~~~~
     │
     └─ test/snmp_sim_integration_test.exs:189:13: SnmpSimIntegrationTest."test End-to-End Device Simulation device info and statistics work correctly"/1

     warning: variable "profile" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 222 │       {:ok, profile} =
     │             ~~~~~~~
     │
     └─ test/snmp_sim_integration_test.exs:222:13: SnmpSimIntegrationTest."test End-to-End Device Simulation device reboot functionality works"/1

     warning: variable "i" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 315 │         for i <- 1..20 do
     │             ~
     │
     └─ test/snmp_sim_integration_test.exs:315:13: SnmpSimIntegrationTest."test Performance and Reliability handles multiple concurrent requests per device"/1

     warning: variable "profile" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 294 │       {:ok, profile} =
     │             ~~~~~~~
     │
     └─ test/snmp_sim_integration_test.exs:294:13: SnmpSimIntegrationTest."test Performance and Reliability handles multiple concurrent requests per device"/1

     warning: the underscored variable "_i" is used after being set. A leading underscore indicates that the value of the variable should be ignored. If this is intended please rename the variable to remove the underscore
     │
 364 │         if rem(_i, 10) == 0, do: Process.sleep(10)
     │                ~
     │
     └─ test/snmp_sim_integration_test.exs:364:16: SnmpSimIntegrationTest."test Performance and Reliability device memory usage remains stable"/1

    warning: variable "i" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 31 │         for i <- 1..10 do
    │             ~
    │
    └─ test/snmp_sim/core/server_test.exs:31:13: SnmpSim.Core.ServerTest."test UDP Server handles concurrent requests without blocking"/1

     warning: variable "profile" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 337 │       {:ok, profile} =
     │             ~~~~~~~
     │
     └─ test/snmp_sim_integration_test.exs:337:13: SnmpSimIntegrationTest."test Performance and Reliability device memory usage remains stable"/1

    warning: variable "i" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 73 │         for i <- 1..50 do
    │             ~
    │
    └─ test/snmp_sim/core/server_test.exs:73:13: SnmpSim.Core.ServerTest."test UDP Server processes 100+ requests per second"/1

     warning: variable "i" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 122 │       for i <- 1..5 do
     │           ~
     │
     └─ test/snmp_sim/core/server_test.exs:122:11: SnmpSim.Core.ServerTest."test UDP Server manages socket resources efficiently"/1

     warning: variable "profile" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 422 │       {:ok, profile} =
     │             ~~~~~~~
     │
     └─ test/snmp_sim_integration_test.exs:422:13: SnmpSimIntegrationTest."test Error Handling and Edge Cases handles invalid community strings"/1

     warning: variable "i" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 270 │       for i <- 1..5 do
     │           ~
     │
     └─ test/snmp_sim/core/server_test.exs:270:11: SnmpSim.Core.ServerTest."test Performance Monitoring tracks processing times"/1

     warning: variable "profile" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 454 │       {:ok, profile} =
     │             ~~~~~~~
     │
     └─ test/snmp_sim_integration_test.exs:454:13: SnmpSimIntegrationTest."test Error Handling and Edge Cases handles port conflicts gracefully"/1

    warning: variable "profile" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 93 │       {:ok, profile} =
    │             ~~~~~~~
    │
    └─ test/snmp_sim_phase2_integration_test.exs:93:13: SnmpSimPhase2IntegrationTest."test Enhanced Behavior Integration device starts successfully with enhanced behaviors"/1

     warning: variable "profile" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 129 │       {:ok, profile} =
     │             ~~~~~~~
     │
     └─ test/snmp_sim_phase2_integration_test.exs:129:13: SnmpSimPhase2IntegrationTest."test Enhanced Behavior Integration applies preset behaviors correctly"/1

     warning: variable "profile" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 289 │     {:ok, profile} = ProfileLoader.load_profile(device_type, source, behaviors: behaviors)
     │           ~~~~~~~
     │
     └─ test/snmp_sim_phase2_integration_test.exs:289:11: SnmpSimPhase2IntegrationTest.start_manual_devices/2

    warning: variable "test_port" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 86 │     test "determines device type based on port range", %{test_port: test_port} do
    │                                                                     ~~~~~~~~~
    │
    └─ test/snmp_sim/lazy_device_pool_test.exs:86:69: SnmpSim.LazyDevicePoolTest."test device creation determines device type based on port range"/1

    warning: unused alias OptimizedUdpServer
    │
 12 │   alias SnmpSim.Performance.{
    │   ~
    │
    └─ test/snmp_sim/performance/performance_test.exs:12:3

    warning: variable "min" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 45 │           {:increment_counters, %{rate_range: {min, max}}} ->
    │                                                ~
    │
    └─ test/snmp_sim/behavior_config_test.exs:45:48: SnmpSim.BehaviorConfigTest."test Behavior Presets CMTS realistic preset has appropriate high-capacity settings"/1

    warning: variable "type" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 93 │       [{next_oid, type, value}] = response_pdu.varbinds
    │                   ~~~~
    │
    └─ test/snmp_sim/comprehensive_walk_test.exs:93:19: SnmpSim.ComprehensiveWalkTest."test Walk Functionality - All Versions walk with GETNEXT sequence - SNMPv1"/1

     warning: variable "type" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 121 │       [{next_oid, type, value}] = response_pdu.varbinds
     │                   ~~~~
     │
     └─ test/snmp_sim/comprehensive_walk_test.exs:121:19: SnmpSim.ComprehensiveWalkTest."test Walk Functionality - All Versions walk with GETNEXT sequence - SNMPv2c"/1

     warning: variable "type" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 148 │       for {oid, type, value} <- response_pdu.varbinds do
     │                 ~
     │
     └─ test/snmp_sim/comprehensive_walk_test.exs:148:17: SnmpSim.ComprehensiveWalkTest."test Walk Functionality - All Versions GETBULK operation - SNMPv2c only"/1

     warning: variable "value" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 148 │       for {oid, type, value} <- response_pdu.varbinds do
     │                       ~
     │
     └─ test/snmp_sim/comprehensive_walk_test.exs:148:23: SnmpSim.ComprehensiveWalkTest."test Walk Functionality - All Versions GETBULK operation - SNMPv2c only"/1

    warning: unused alias Device
    │
  4 │   alias SnmpSim.{LazyDevicePool, Device}
    │   ~
    │
    └─ test/snmp_sim/lazy_device_pool_test.exs:4:3

     warning: variable "other" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 200 │           {:error, other} ->
     │                    ~
     │
     └─ test/snmp_sim/snmp_operations_test.exs:200:20: SnmpSim.SNMPOperationsTest."test Device SNMP operations non-existent OIDs return proper SNMP error types"/1

    warning: unused alias Device
    │
 15 │   alias SnmpSim.{Device, LazyDevicePool}
    │   ~
    │
    └─ test/snmp_sim/comprehensive_walk_test.exs:15:3

    warning: unused alias PDU
    │
 17 │   alias SnmpLib.PDU
    │   ~
    │
    └─ test/snmp_sim/comprehensive_walk_test.exs:17:3

     warning: variable "startup_result" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 232 │       assert {:ok, startup_result} = result
     │                    ~~~~~~~~~~~~~~
     │
     └─ test/snmp_sim/multi_device_startup_test.exs:232:20: SnmpSim.MultiDeviceStartupTest."test pre-warming functionality pre-warms devices for immediate availability"/1

     warning: variable "port_range" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 297 │     test "console progress callback works", %{port_range: port_range} do
     │                                                           ~~~~~~~~~~
     │
     └─ test/snmp_sim/multi_device_startup_test.exs:297:59: SnmpSim.MultiDeviceStartupTest."test startup status and monitoring console progress callback works"/1

     warning: variable "i" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 419 │         for i <- 1..3 do
     │             ~
     │
     └─ test/snmp_sim/multi_device_startup_test.exs:419:13: SnmpSim.MultiDeviceStartupTest."test concurrent startup operations handles concurrent startup requests"/1

    warning: unused alias Server
    │
 12 │   alias SnmpSim.Core.Server
    │   ~
    │
    └─ test/snmp_sim/snmp_operations_test.exs:12:3

     warning: variable "expected_factor" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 285 │       Enum.each(results, fn {hour, daily_factor, weekly_factor, value, expected_factor} ->
     │                                                                        ~
     │
     └─ test/snmp_sim_phase5_integration_test.exs:285:72: SnmpSim.Phase5IntegrationTest."test Phase 5 Realistic Value Simulation Integration time patterns integration across daily cycle"/1


SnmpSim.ConfigTest [test/snmp_sim/config_test.exs]
  * test configuration validation rejects configuration without snmp_sim key [L#26]    warning: unused alias Device
    │
 11 │   alias SnmpSim.{Device, LazyDevicePool}
    │   ~
    │
    └─ test/snmp_sim/snmp_version_compatibility_test.exs:11:3

    warning: unused alias PDU
    │
 13 │   alias SnmpLib.PDU
    │   ~
    │
    └─ test/snmp_sim/snmp_version_compatibility_test.exs:13:3

    warning: unused alias LazyDevicePool
    │
 19 │   alias SnmpSim.{Device, LazyDevicePool, Core.Server}
    │   ~
    │
    └─ test/snmp_sim_production_validation_test.exs:19:3

    warning: unused alias PortHelper
    │
 20 │   alias SnmpSim.TestHelpers.{ProductionTestHelper, PerformanceHelper, PortHelper}
    │   ~
    │
    └─ test/snmp_sim_production_validation_test.exs:20:3

    warning: unused alias Server
    │
 19 │   alias SnmpSim.{Device, LazyDevicePool, Core.Server}
    │   ~
    │
    └─ test/snmp_sim_production_validation_test.exs:19:3

  * test configuration validation rejects configuration without snmp_sim key (12.1ms) [L#26]
  * test sample configuration can write sample configuration to JSON file [L#194]    warning: variable "profile" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 30 │       {:ok, profile} =
    │             ~~~~~~~
    │
    └─ test/snmp_sim_erlang_snmp_integration_test.exs:30:13: SnmpSimErlangSnmpIntegrationTest.__ex_unit_setup_0_0/1

     warning: variable "walked_oids" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 185 │       walked_oids = []
     │       ~~~~~~~~~~~
     │
     └─ test/snmp_sim_erlang_snmp_integration_test.exs:185:7: SnmpSimErlangSnmpIntegrationTest."test Integration with Erlang SNMP Manager Erlang SNMP handles lexicographic ordering correctly"/1

     warning: variable "profile" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 471 │       {:ok, profile} =
     │             ~~~~~~~
     │
     └─ test/snmp_sim_erlang_snmp_integration_test.exs:471:13: SnmpSimErlangSnmpIntegrationTest.__ex_unit_setup_1_0/1

  * test sample configuration can write sample configuration to JSON file (28.8ms) [L#194]
  * test JSON configuration handles non-existent files [L#183]  * test JSON configuration handles non-existent files (3.3ms) [L#183]
  * test YAML configuration can write sample configuration to YAML file [L#246]     warning: variable "cell_min" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 238 │       {cell_min, cell_max, cell_factor} = cellular_rates
     │        ~~~~~~~~
     │
     └─ test/snmp_sim/time_patterns_test.exs:238:8: SnmpSim.TimePatternsTest."test Interface Traffic Rates returns appropriate rates for different interface types"/1

     warning: variable "docsis_min" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 237 │       {docsis_min, docsis_max, docsis_factor} = docsis_rates
     │        ~~~~~~~~~~
     │
     └─ test/snmp_sim/time_patterns_test.exs:237:8: SnmpSim.TimePatternsTest."test Interface Traffic Rates returns appropriate rates for different interface types"/1

     warning: variable "eth_min" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 236 │       {eth_min, eth_max, eth_factor} = ethernet_rates
     │        ~~~~~~~
     │
     └─ test/snmp_sim/time_patterns_test.exs:236:8: SnmpSim.TimePatternsTest."test Interface Traffic Rates returns appropriate rates for different interface types"/1

     warning: do not use "length(bulk_oids) > 0" to check if a list is not empty since length always traverses the whole list. Prefer to pattern match on a non-empty list, such as [_ | _], or use "bulk_oids != []" as a guard
     │
 138 │           {:ok, bulk_oids} when length(bulk_oids) > 0 ->
     │                                                   ~
     │
     └─ test/snmp_sim/getbulk_end_of_mib_test.exs:138:51

     warning: the underscored variable "_last_oid" is used after being set. A leading underscore indicates that the value of the variable should be ignored. If this is intended please rename the variable to remove the underscore
     │
 141 │             {:cont, {_last_oid, new_total}}
     │                      ~
     │
     └─ test/snmp_sim/getbulk_end_of_mib_test.exs:141:22: SnmpSim.GetbulkEndOfMibTest."test GETBULK collection fixes get_bulk_oids simulates complete walk without infinite loops"/1

     warning: variable "iterations" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 133 │       iterations = 0
     │       ~~~~~~~~~~
     │
     └─ test/snmp_sim/getbulk_end_of_mib_test.exs:133:7: SnmpSim.GetbulkEndOfMibTest."test GETBULK collection fixes get_bulk_oids simulates complete walk without infinite loops"/1

     warning: variable "total_oids_collected" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 132 │       total_oids_collected = 0
     │       ~~~~~~~~~~~~~~~~~~~~
     │
     └─ test/snmp_sim/getbulk_end_of_mib_test.exs:132:7: SnmpSim.GetbulkEndOfMibTest."test GETBULK collection fixes get_bulk_oids simulates complete walk without infinite loops"/1

     warning: variable "new_visited" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 248 │               new_visited = MapSet.put(visited_oids, returned_oid)
     │               ~
     │
     └─ test/snmp_sim/getbulk_end_of_mib_test.exs:248:15: SnmpSim.GetbulkEndOfMibTest."test SNMP protocol compliance SNMP GETNEXT progression works correctly"/1

     warning: variable "device_type" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 278 │     test "empty walk file handling", %{device_type: device_type} do
     │                                                     ~~~~~~~~~~~
     │
     └─ test/snmp_sim/getbulk_end_of_mib_test.exs:278:53: SnmpSim.GetbulkEndOfMibTest."test edge cases and regression tests empty walk file handling"/1

     warning: variable "value" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 300 │       for {oid, type, value} <- bulk_oids do
     │                       ~
     │
     └─ test/snmp_sim/getbulk_end_of_mib_test.exs:300:23: SnmpSim.GetbulkEndOfMibTest."test edge cases and regression tests large GETBULK requests don't cause issues"/1

     warning: variable "t1" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 236 │   defp compare_oid_parts([h1 | t1], [h2 | t2]) when h1 < h2, do: true
     │                                ~~
     │
     └─ test/snmp_sim/profile_loader_test.exs:236:32: SnmpSim.ProfileLoaderTest.compare_oid_parts/2

     warning: variable "t2" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 236 │   defp compare_oid_parts([h1 | t1], [h2 | t2]) when h1 < h2, do: true
     │                                           ~~
     │
     └─ test/snmp_sim/profile_loader_test.exs:236:43: SnmpSim.ProfileLoaderTest.compare_oid_parts/2

     warning: variable "t1" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 237 │   defp compare_oid_parts([h1 | t1], [h2 | t2]) when h1 > h2, do: false
     │                                ~~
     │
     └─ test/snmp_sim/profile_loader_test.exs:237:32: SnmpSim.ProfileLoaderTest.compare_oid_parts/2

     warning: variable "t2" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 237 │   defp compare_oid_parts([h1 | t1], [h2 | t2]) when h1 > h2, do: false
     │                                           ~~
     │
     └─ test/snmp_sim/profile_loader_test.exs:237:43: SnmpSim.ProfileLoaderTest.compare_oid_parts/2

  * test YAML configuration can write sample configuration to YAML file (67.8ms) [L#246]
  * test sample configuration sample configuration is valid [L#189]    warning: unused alias PortHelper
    │
  5 │   alias SnmpSim.TestHelpers.PortHelper
    │   ~
    │
    └─ test/snmp_sim_phase5_integration_test.exs:5:3

  * test sample configuration sample configuration is valid (9.8ms) [L#189]
  * test environment variable parsing loads configuration from environment variables [L#68]  * test environment variable parsing loads configuration from environment variables (16.5ms) [L#68]
  * test JSON configuration loads valid JSON configuration [L#123]    warning: variable "profile" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 23 │       {:ok, profile} =
    │             ~~~~~~~
    │
    └─ test/snmp_sim_shell_integration_test.exs:23:13: SnmpSimShellIntegrationTest.__ex_unit_setup_0_0/1

     warning: variable "profile" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 219 │       {:ok, profile} =
     │             ~~~~~~~
     │
     └─ test/snmp_sim_shell_integration_test.exs:219:13: SnmpSimShellIntegrationTest.__ex_unit_setup_1_0/1

    warning: variable "iterations" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 80 │         iterations = 0
    │         ~
    │
    └─ test/snmp_sim/getbulk_regression_test.exs:80:9: SnmpSim.GetbulkRegressionTest."test GETBULK end-of-MIB regression tests get_bulk_oids simulates walk without infinite loops"/1

  * test JSON configuration loads valid JSON configuration (6.0ms) [L#123]
  * test configuration validation validates device group port ranges [L#33]    warning: variable "total_oids" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 79 │         total_oids = 0
    │         ~
    │
    └─ test/snmp_sim/getbulk_regression_test.exs:79:9: SnmpSim.GetbulkRegressionTest."test GETBULK end-of-MIB regression tests get_bulk_oids simulates walk without infinite loops"/1

     warning: variable "last_oid" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 150 │         last_oid = nil
     │         ~
     │
     └─ test/snmp_sim/getbulk_regression_test.exs:150:9: SnmpSim.GetbulkRegressionTest."test End-of-MIB handling GETBULK at end of MIB returns empty list"/1

  * test configuration validation validates device group port ranges (1.8ms) [L#33]
  * test YAML configuration loads valid YAML configuration [L#213]  * test YAML configuration loads valid YAML configuration (6.8ms) [L#213]
  * test configuration validation validates correct configuration [L#6]  * test configuration validation validates correct configuration (2.2ms) [L#6]
  * test configuration validation requires essential fields in device groups [L#51]  * test configuration validation requires essential fields in device groups (3.5ms) [L#51]
  * test environment variable parsing handles missing environment variables with defaults [L#101]  * test environment variable parsing handles missing environment variables with defaults (3.9ms) [L#101]
  * test JSON configuration handles invalid JSON [L#165]  * test JSON configuration handles invalid JSON (16.1ms) [L#165]

SnmpSim.GetbulkFunctionalityTest [test/snmp_sim/getbulk_functionality_test.exs]
  * test GETBULK functionality GETBULK OID progression validation - the critical test [L#77]  * test GETBULK functionality GETBULK OID progression validation - the critical test (15.3ms) [L#77]
  * test GETBULK functionality GETBULK should not return same OID as query [L#151]  * test GETBULK functionality GETBULK should not return same OID as query (0.6ms) [L#151]
  * test GETBULK functionality GETBULK returns consistent varbind format [L#107]  * test GETBULK functionality GETBULK returns consistent varbind format (2.3ms) [L#107]
  * test GETBULK functionality handles basic GETBULK request starting from internet root [L#39]  * test GETBULK functionality handles basic GETBULK request starting from internet root (0.6ms) [L#39]
  * test GETBULK functionality GETBULK error status should be 0 not 5 [L#130]  * test GETBULK functionality GETBULK error status should be 0 not 5 (0.5ms) [L#130]
  * test GETBULK functionality GETBULK fallback function format consistency [L#182]GETBULK varbinds: [
  {[1, 3, 6, 1, 2, 1, 1, 1, 0], :octet_string,
   "Motorola SB6141 DOCSIS 3.0 Cable Modem"}
]
GETBULK error_status: 0
  * test GETBULK functionality GETBULK fallback function format consistency (0.5ms) [L#182]

SnmpSim.ComprehensiveBulkWalkTest [test/snmp_sim/comprehensive_bulk_walk_test.exs]
  * test Tuple Format Regression Tests get_next_oid_value returns 3-tuples consistently [L#515]  * test Tuple Format Regression Tests get_next_oid_value returns 3-tuples consistently (0.4ms) [L#515]
  * test Comprehensive GETBULK Testing - 25+ Different Scenarios 2. GETBULK with multiple OIDs [L#33]  * test Comprehensive GETBULK Testing - 25+ Different Scenarios 2. GETBULK with multiple OIDs (0.5ms) [L#33]
  * test Comprehensive GETBULK Testing - 25+ Different Scenarios 11. GETBULK from iso.org.dod.internet [L#155]  * test Comprehensive GETBULK Testing - 25+ Different Scenarios 11. GETBULK from iso.org.dod.internet (0.4ms) [L#155]
  * test Comprehensive GETBULK Testing - 25+ Different Scenarios 9. GETBULK with list OID input [L#131]  * test Comprehensive GETBULK Testing - 25+ Different Scenarios 9. GETBULK with list OID input (0.5ms) [L#131]
  * test Comprehensive GETBULK Testing - 25+ Different Scenarios 13. GETBULK with multiple separate calls [L#181]  * test Comprehensive GETBULK Testing - 25+ Different Scenarios 13. GETBULK with multiple separate calls (0.4ms) [L#181]
  * test Comprehensive GETBULK Testing - 25+ Different Scenarios 22. GETBULK error handling [L#362]  * test Comprehensive GETBULK Testing - 25+ Different Scenarios 22. GETBULK error handling (0.5ms) [L#362]
  * test Comprehensive GETBULK Testing - 25+ Different Scenarios 18. GETBULK with mixed OID formats [L#306]  * test Comprehensive GETBULK Testing - 25+ Different Scenarios 18. GETBULK with mixed OID formats (0.3ms) [L#306]
  * test Comprehensive GETBULK Testing - 25+ Different Scenarios 24. GETBULK sequential consistency [L#393]  * test Comprehensive GETBULK Testing - 25+ Different Scenarios 24. GETBULK sequential consistency (0.5ms) [L#393]
  * test Comprehensive GETBULK Testing - 25+ Different Scenarios 14. GETBULK progression verification [L#197]  * test Comprehensive GETBULK Testing - 25+ Different Scenarios 14. GETBULK progression verification (0.5ms) [L#197]
  * test Comprehensive GETBULK Testing - 25+ Different Scenarios 16. GETBULK type consistency check [L#240]  * test Comprehensive GETBULK Testing - 25+ Different Scenarios 16. GETBULK type consistency check (0.5ms) [L#240]
  * test Comprehensive GETBULK Testing - 25+ Different Scenarios 25. GETBULK comprehensive format validation [L#420]  * test Comprehensive GETBULK Testing - 25+ Different Scenarios 25. GETBULK comprehensive format validation (0.3ms) [L#420]
  * test Comprehensive GETBULK Testing - 25+ Different Scenarios 10. GETBULK from root OID [L#143]  * test Comprehensive GETBULK Testing - 25+ Different Scenarios 10. GETBULK from root OID (0.4ms) [L#143]
  * test Comprehensive GETBULK Testing - 25+ Different Scenarios 5. GETBULK from interfaces subtree [L#76]  * test Comprehensive GETBULK Testing - 25+ Different Scenarios 5. GETBULK from interfaces subtree (0.5ms) [L#76]
  * test Comprehensive GETBULK Testing - 25+ Different Scenarios 7. GETBULK with multiple starting OIDs [L#100]  * test Comprehensive GETBULK Testing - 25+ Different Scenarios 7. GETBULK with multiple starting OIDs (0.7ms) [L#100]
  * test Comprehensive GETBULK Testing - 25+ Different Scenarios 3. GETBULK with max_repetitions = 1 [L#51]  * test Comprehensive GETBULK Testing - 25+ Different Scenarios 3. GETBULK with max_repetitions = 1 (0.3ms) [L#51]
  * test Comprehensive GETBULK Testing - 25+ Different Scenarios 20. GETBULK subtree boundary testing [L#333]  * test Comprehensive GETBULK Testing - 25+ Different Scenarios 20. GETBULK subtree boundary testing (0.5ms) [L#333]
  * test Comprehensive GETBULK Testing - 25+ Different Scenarios 12. GETBULK with zero max_repetitions [L#167]  * test Comprehensive GETBULK Testing - 25+ Different Scenarios 12. GETBULK with zero max_repetitions (0.5ms) [L#167]
  * test Comprehensive GETBULK Testing - 25+ Different Scenarios 1. Basic GETBULK from system root [L#19]  * test Comprehensive GETBULK Testing - 25+ Different Scenarios 1. Basic GETBULK from system root (0.5ms) [L#19]
  * test Comprehensive GETBULK Testing - 25+ Different Scenarios 4. GETBULK with max_repetitions = 50 [L#64]  * test Comprehensive GETBULK Testing - 25+ Different Scenarios 4. GETBULK with max_repetitions = 50 (0.3ms) [L#64]
  * test Comprehensive GETBULK Testing - 25+ Different Scenarios 6. GETBULK from specific leaf OID [L#88]  * test Comprehensive GETBULK Testing - 25+ Different Scenarios 6. GETBULK from specific leaf OID (0.5ms) [L#88]
  * test Comprehensive GETBULK Testing - 25+ Different Scenarios 27. GETBULK stress test - multiple rapid requests [L#488]  * test Comprehensive GETBULK Testing - 25+ Different Scenarios 27. GETBULK stress test - multiple rapid requests (0.4ms) [L#488]
  * test Tuple Format Regression Tests Device.get_next returns proper format [L#532]  * test Tuple Format Regression Tests Device.get_next returns proper format (0.4ms) [L#532]
  * test Comprehensive GETBULK Testing - 25+ Different Scenarios 23. GETBULK with empty OID [L#380]  * test Comprehensive GETBULK Testing - 25+ Different Scenarios 23. GETBULK with empty OID (0.4ms) [L#380]
  * test Comprehensive GETBULK Testing - 25+ Different Scenarios 17. GETBULK value content verification [L#282]  * test Comprehensive GETBULK Testing - 25+ Different Scenarios 17. GETBULK value content verification (0.8ms) [L#282]
  * test Comprehensive GETBULK Testing - 25+ Different Scenarios 8. GETBULK with string OID input [L#119]  * test Comprehensive GETBULK Testing - 25+ Different Scenarios 8. GETBULK with string OID input (0.6ms) [L#119]
  * test Comprehensive GETBULK Testing - 25+ Different Scenarios 15. GETBULK with invalid starting OID [L#222]  * test Comprehensive GETBULK Testing - 25+ Different Scenarios 15. GETBULK with invalid starting OID (0.7ms) [L#222]
  * test Comprehensive GETBULK Testing - 25+ Different Scenarios 26. GETBULK edge case - end of MIB [L#471]  * test Comprehensive GETBULK Testing - 25+ Different Scenarios 26. GETBULK edge case - end of MIB (0.6ms) [L#471]
  * test Comprehensive GETBULK Testing - 25+ Different Scenarios 19. GETBULK large repetition count [L#321]  * test Comprehensive GETBULK Testing - 25+ Different Scenarios 19. GETBULK large repetition count (0.6ms) [L#321]
  * test Comprehensive GETBULK Testing - 25+ Different Scenarios 21. GETBULK response size verification [L#346]  * test Comprehensive GETBULK Testing - 25+ Different Scenarios 21. GETBULK response size verification (0.6ms) [L#346]
    warning: module attribute @test_timeout was set but never used
    │
 15 │   @test_timeout 10_000
    │   ~~~~~~~~~~~~~~~~~~~~
    │
    └─ test/snmp_sim/udp_server_integration_test.exs:15: SnmpSim.UdpServerIntegrationTest (module)

    warning: unused alias PDU
    │
 13 │   alias SnmpLib.PDU
    │   ~
    │
    └─ test/snmp_sim/udp_server_integration_test.exs:13:3

    warning: unused alias Server
    │
 11 │   alias SnmpSim.{LazyDevicePool, Core.Server}
    │   ~
    │
    └─ test/snmp_sim/udp_server_integration_test.exs:11:3

     warning: comparison between distinct types found:

         var === :critical

     given types:

         dynamic(:warning) === :critical

     where "var" (context Kernel) was given the type:

         # type: dynamic(:warning)
         # from: test/snmp_sim_production_validation_test.exs:329
         var = alert_details.severity

     While Elixir can compare across all types, you are comparing across types which are always disjoint, and the result is either always true or always false

     typing violation found at:
     │
 329 │       assert alert_details.severity in [:warning, :critical],
     │       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     │
     └─ test/snmp_sim_production_validation_test.exs:329: SnmpSimProductionValidationTest."test monitoring and alerting systems function correctly"/1

    warning: comparison between distinct types found:

        left != right

    given types:

        binary() != nil

    where "left" (context ExUnit.Assertions) was given the type:

        # type: binary()
        # from: test/snmp_sim/mib/shared_profiles_bulk_test.exs:53
        left = value

    where "right" (context ExUnit.Assertions) was given the type:

        # type: nil
        # from: test/snmp_sim/mib/shared_profiles_bulk_test.exs:53
        right = nil

    While Elixir can compare across all types, you are comparing across types which are always disjoint, and the result is either always true or always false

    typing violation found at:
    │
 53 │       assert value != nil
    │                    ~
    │
    └─ test/snmp_sim/mib/shared_profiles_bulk_test.exs:53:20: SnmpSim.MIB.SharedProfilesBulkTest."test GETBULK format regression tests demonstrates proper 3-tuple format for device compatibility"/1

     warning: SnmpSim.TestHelpers.StabilityTestHelper.analyze_response_times/1 is undefined or private. Did you mean:

           * analyze_memory_samples/1

     │
 178 │       StabilityTestHelper.analyze_response_times(metrics.response_times)
     │                           ~
     │
     └─ test/snmp_sim_stability_test.exs:178:27: SnmpSimStabilityTest."test sustained load handling for 60 minutes"/1

     warning: SnmpSim.TestHelpers.StabilityTestHelper.calculate_error_rate/2 is undefined or private
     │
 180 │     error_rate = StabilityTestHelper.calculate_error_rate(metrics.errors, metrics.total_requests)
     │                                      ~
     │
     └─ test/snmp_sim_stability_test.exs:180:38: SnmpSimStabilityTest."test sustained load handling for 60 minutes"/1

     warning: :snmp.sync_get/5 is undefined or private
     │
 518 │         case :snmp.sync_get("127.0.0.1", port, "public", [test_oid], 5000) do
     │                    ~
     │
     └─ test/snmp_sim/performance/performance_test.exs:518:20: SnmpSim.Performance.PerformanceTest.test_device_responsiveness/1
     └─ test/snmp_sim/performance/performance_test.exs:556:13: SnmpSim.Performance.PerformanceTest.test_loop/2
     └─ test/snmp_sim/performance/performance_test.exs:613:17: SnmpSim.Performance.PerformanceTest.warm_up_caches/1
     └─ test/snmp_sim/performance/performance_test.exs:627:13: SnmpSim.Performance.PerformanceTest.test_response_times/3
     └─ test/snmp_sim/performance/performance_test.exs:797:20: SnmpSim.Performance.PerformanceTest.generate_load_burst/2

     warning: :snmpm.set_verbosity/1 is undefined or private
     │
 225 │       :snmpm.set_verbosity(:silence)
     │              ~
     │
     └─ test/snmp_sim_erlang_snmp_integration_simple_test.exs:225:14: SnmpSimErlangSnmpIntegrationSimpleTest.configure_snmp_logging/0

     warning: :snmpm.set_verbosity/2 is undefined or private
     │
 226 │       :snmpm.set_verbosity(:net_if, :silence)
     │              ~
     │
     └─ test/snmp_sim_erlang_snmp_integration_simple_test.exs:226:14: SnmpSimErlangSnmpIntegrationSimpleTest.configure_snmp_logging/0
     └─ test/snmp_sim_erlang_snmp_integration_simple_test.exs:227:14: SnmpSimErlangSnmpIntegrationSimpleTest.configure_snmp_logging/0
     └─ test/snmp_sim_erlang_snmp_integration_simple_test.exs:228:14: SnmpSimErlangSnmpIntegrationSimpleTest.configure_snmp_logging/0
     └─ test/snmp_sim_erlang_snmp_integration_simple_test.exs:229:14: SnmpSimErlangSnmpIntegrationSimpleTest.configure_snmp_logging/0

     warning: :snmpm.set_verbosity/1 is undefined or private
     │
 610 │       :snmpm.set_verbosity(:silence)
     │              ~
     │
     └─ test/snmp_sim_erlang_snmp_integration_test.exs:610:14: SnmpSimErlangSnmpIntegrationTest.configure_snmp_logging/0

     warning: :dbg.stop_clear/0 is undefined (module :dbg is not available or is yet to be defined)
     │
 233 │       :dbg.stop_clear()
     │            ~
     │
     └─ test/snmp_sim_erlang_snmp_integration_simple_test.exs:233:12: SnmpSimErlangSnmpIntegrationSimpleTest.configure_snmp_logging/0

     warning: :snmp.set_debug/1 is undefined or private
     │
 237 │         :snmp.set_debug(false)
     │               ~
     │
     └─ test/snmp_sim_erlang_snmp_integration_simple_test.exs:237:15: SnmpSimErlangSnmpIntegrationSimpleTest.configure_snmp_logging/0

     warning: :snmpm.set_verbosity/2 is undefined or private
     │
 611 │       :snmpm.set_verbosity(:net_if, :silence)
     │              ~
     │
     └─ test/snmp_sim_erlang_snmp_integration_test.exs:611:14: SnmpSimErlangSnmpIntegrationTest.configure_snmp_logging/0
     └─ test/snmp_sim_erlang_snmp_integration_test.exs:612:14: SnmpSimErlangSnmpIntegrationTest.configure_snmp_logging/0
     └─ test/snmp_sim_erlang_snmp_integration_test.exs:613:14: SnmpSimErlangSnmpIntegrationTest.configure_snmp_logging/0
     └─ test/snmp_sim_erlang_snmp_integration_test.exs:614:14: SnmpSimErlangSnmpIntegrationTest.configure_snmp_logging/0

     warning: :dbg.stop_clear/0 is undefined (module :dbg is not available or is yet to be defined)
     │
 618 │       :dbg.stop_clear()
     │            ~
     │
     └─ test/snmp_sim_erlang_snmp_integration_test.exs:618:12: SnmpSimErlangSnmpIntegrationTest.configure_snmp_logging/0

     warning: :snmp.set_debug/1 is undefined or private
     │
 622 │         :snmp.set_debug(false)
     │               ~
     │
     └─ test/snmp_sim_erlang_snmp_integration_test.exs:622:15: SnmpSimErlangSnmpIntegrationTest.configure_snmp_logging/0


SnmpSim.CounterEncodingTest [test/snmp_sim/counter_encoding_test.exs]
  * test Counter32 and Gauge32 encoding Gauge32 values return proper integer tuples, not NULL [L#64]  * test Counter32 and Gauge32 encoding Gauge32 values return proper integer tuples, not NULL (4.2ms) [L#64]
  * test Counter32 and Gauge32 encoding Counter32 values are non-zero and realistic [L#96]  * test Counter32 and Gauge32 encoding Counter32 values are non-zero and realistic (0.2ms) [L#96]
  * test Counter32 and Gauge32 encoding Counter32 values return proper integer tuples, not NULL [L#28]  * test Counter32 and Gauge32 encoding Counter32 values return proper integer tuples, not NULL (0.1ms) [L#28]
  * test Counter32 and Gauge32 encoding snmp_lib version is 1.0.1 or higher (encoding fix) [L#115]  * test Counter32 and Gauge32 encoding snmp_lib version is 1.0.1 or higher (encoding fix) (0.1ms) [L#115]

SnmpSim.ValueSimulatorTest [test/snmp_sim/value_simulator_test.exs]
  * test Traffic Counter Simulation applies counter wrapping for 32-bit counters [L#34]  * test Traffic Counter Simulation applies counter wrapping for 32-bit counters (2.8ms) [L#34]
  * test Static Value Handling returns static values unchanged [L#237]  * test Static Value Handling returns static values unchanged (0.1ms) [L#237]
  * test Status Enumeration Simulation maintains status based on device health [L#201]  * test Status Enumeration Simulation maintains status based on device health (0.1ms) [L#201]
  * test Temperature Simulation simulates realistic temperature with load correlation [L#266]  * test Temperature Simulation simulates realistic temperature with load correlation (0.1ms) [L#266]
  * test Edge Cases handles unknown behavior types gracefully [L#292]  * test Edge Cases handles unknown behavior types gracefully (0.09ms) [L#292]
  * test Status Enumeration Simulation changes status based on poor device health [L#217]  * test Status Enumeration Simulation changes status based on poor device health (0.09ms) [L#217]
  * test Gauge Simulation simulates power gauge with environmental factors [L#99]  * test Gauge Simulation simulates power gauge with environmental factors (0.1ms) [L#99]
  * test Error Counter Simulation increases error rates under poor conditions [L#151]  * test Error Counter Simulation increases error rates under poor conditions (0.08ms) [L#151]
  * test Gauge Simulation generates utilization gauge with daily patterns [L#50]  * test Gauge Simulation generates utilization gauge with daily patterns (0.1ms) [L#50]
  * test Static Value Handling handles different static data types correctly [L#247]  * test Static Value Handling handles different static data types correctly (0.08ms) [L#247]
  * test Traffic Counter Simulation generates realistic traffic counter increments [L#7]  * test Traffic Counter Simulation generates realistic traffic counter increments (0.1ms) [L#7]
  * test Gauge Simulation simulates SNR gauge with inverse utilization correlation [L#74]  * test Gauge Simulation simulates SNR gauge with inverse utilization correlation (0.1ms) [L#74]
  * test Error Counter Simulation generates low error rates under normal conditions [L#124]  * test Error Counter Simulation generates low error rates under normal conditions (0.1ms) [L#124]
  * test System Counter Simulation simulates sysUpTime correctly [L#178]  * test System Counter Simulation simulates sysUpTime correctly (0.1ms) [L#178]
  * test Edge Cases handles missing device state fields gracefully [L#303]  * test Edge Cases handles missing device state fields gracefully (0.1ms) [L#303]

SnmpSim.DeviceWalkOidTest [test/snmp_sim/device_walk_oid_test.exs]
  * test Device.walk_oid functionality walk_oid handles empty subtrees gracefully [L#59]  * test Device.walk_oid functionality walk_oid handles empty subtrees gracefully (0.1ms) [L#59]
  * test Regression tests for the original bug get_next_oid_value returns consistent format [L#183]  * test Regression tests for the original bug get_next_oid_value returns consistent format (0.1ms) [L#183]
  * test Error handling walk_oid timeout handling [L#147]  * test Error handling walk_oid timeout handling (0.1ms) [L#147]
  * test Regression tests for the original bug walk_oid does not crash with CaseClauseError [L#159]  * test Regression tests for the original bug walk_oid does not crash with CaseClauseError (0.1ms) [L#159]
  * test Device.walk_oid functionality walk_oid recursion limit prevents infinite loops [L#97]  * test Device.walk_oid functionality walk_oid recursion limit prevents infinite loops (0.1ms) [L#97]
  * test OID format consistency walk_oid handles OID prefix checking correctly [L#125]  * test OID format consistency walk_oid handles OID prefix checking correctly (0.1ms) [L#125]
  * test Device.walk_oid functionality walk_oid handles interface table OIDs [L#67]  * test Device.walk_oid functionality walk_oid handles interface table OIDs (0.1ms) [L#67]
  * test Device.walk_oid functionality walk_oid returns consistent format for system group [L#29]  * test Device.walk_oid functionality walk_oid returns consistent format for system group (0.1ms) [L#29]
  * test Device.walk_oid functionality walk_oid with different OID formats [L#75]  * test Device.walk_oid functionality walk_oid with different OID formats (0.1ms) [L#75]
  * test OID format consistency walk_oid always returns string OIDs [L#110]  * test OID format consistency walk_oid always returns string OIDs (0.1ms) [L#110]
  * test Error handling walk_oid handles device errors gracefully [L#139]  * test Error handling walk_oid handles device errors gracefully (0.3ms) [L#139]

SnmpSim.BulkOperationsTest [test/snmp_sim/bulk_operations_test.exs]
  * test GETBULK Request Handling handles GETBULK with non-repeaters [L#54]  * test GETBULK Request Handling handles GETBULK with non-repeaters (1.3ms) [L#54]
  * test Response Size Management optimize_bulk_response with reasonable size limit [L#201]  * test Response Size Management optimize_bulk_response with reasonable size limit (0.1ms) [L#201]
  * test Response Size Management optimize_bulk_response fits results within size limit [L#166]  * test Response Size Management optimize_bulk_response fits results within size limit (0.1ms) [L#166]
  * test Interface Table Processing handles table requests with more repetitions than available [L#265]  * test Interface Table Processing handles table requests with more repetitions than available (0.2ms) [L#265]
  * test Edge Cases and Error Handling handles max non-repeaters equal to varbinds length [L#311]  * test Edge Cases and Error Handling handles max non-repeaters equal to varbinds length (0.1ms) [L#311]
  * test Interface Table Processing handles table requests for non-existent table [L#277]  * test Interface Table Processing handles table requests for non-existent table (0.1ms) [L#277]
  * test Edge Cases and Error Handling handles empty variable bindings list [L#294]  * test Edge Cases and Error Handling handles empty variable bindings list (0.1ms) [L#294]
  * test Response Size Management optimize_bulk_response handles oversized single result [L#191]  * test Response Size Management optimize_bulk_response handles oversized single result (0.09ms) [L#191]
  * test GETBULK Request Handling handles GETBULK beyond end of tree [L#116]  * test GETBULK Request Handling handles GETBULK beyond end of tree (0.1ms) [L#116]
  * test GETBULK Request Handling validates max-repetitions parameter [L#138]  * test GETBULK Request Handling validates max-repetitions parameter (0.1ms) [L#138]
  * test GETBULK Request Handling handles GETBULK with multiple repeating variables [L#79]  * test GETBULK Request Handling handles GETBULK with multiple repeating variables (0.1ms) [L#79]
  * test Interface Table Processing processes interface table efficiently [L#255]  * test Interface Table Processing processes interface table efficiently (0.1ms) [L#255]
  * test GETBULK Request Handling handles basic GETBULK with no non-repeaters [L#37]  * test GETBULK Request Handling handles basic GETBULK with no non-repeaters (0.1ms) [L#37]
  * test GETBULK Request Handling handles GETBULK at end of tree [L#105]  * test GETBULK Request Handling handles GETBULK at end of tree (0.1ms) [L#105]
  * test GETBULK Request Handling validates non-repeaters parameter [L#125]  * test GETBULK Request Handling validates non-repeaters parameter (0.1ms) [L#125]
  * test Edge Cases and Error Handling handles zero max-repetitions [L#302]  * test Edge Cases and Error Handling handles zero max-repetitions (0.1ms) [L#302]
  * test Response Size Management estimates response size for various data types [L#149]  * test Response Size Management estimates response size for various data types (0.08ms) [L#149]
  * test Edge Cases and Error Handling handles empty OID tree [L#285]  * test Edge Cases and Error Handling handles empty OID tree (0.09ms) [L#285]
  * test Edge Cases and Error Handling estimates size for various SNMP data types [L#336]  * test Edge Cases and Error Handling estimates size for various SNMP data types (0.08ms) [L#336]

SnmpSim.SNMPRegressionTest [test/snmp_sim/snmp_regression_test.exs]
  * test Regression: Wrong Type NULL issue SNMP walk simulation returns no NULL values [L#84]  * test Regression: Wrong Type NULL issue SNMP walk simulation returns no NULL values (100.4ms) [L#84]
  * test Regression: Wrong Type NULL issue error conditions don't return NULL values [L#193]  * test Regression: Wrong Type NULL issue error conditions don't return NULL values (100.9ms) [L#193]
  * test Regression: Wrong Type NULL issue interface table OIDs return proper types (not NULL) [L#125]  * test Regression: Wrong Type NULL issue interface table OIDs return proper types (not NULL) (101.0ms) [L#125]
  * test Regression: Wrong Type NULL issue system OIDs return proper SNMP types (not NULL) [L#40]  * test Regression: Wrong Type NULL issue system OIDs return proper SNMP types (not NULL) (101.0ms) [L#40]
  * test Regression: Wrong Type NULL issue device type-specific descriptions are correct [L#155]  * test Regression: Wrong Type NULL issue device type-specific descriptions are correct (259.0ms) [L#155]

SnmpSim.SnmpWalkFixTest [test/snmp_sim/snmp_walk_fix_test.exs]
  * test SNMP Walk OID Loading and Responses fallback logic provides complete interface OID sequence [L#59]First OID found: 1.3.6.1.2.1.2.2.1.1.1 (integer) = 1
Second OID found: 1.3.6.1.2.1.2.2.1.1.2 (integer) = 2
  * test SNMP Walk OID Loading and Responses fallback logic provides complete interface OID sequence (107.1ms) [L#59]
  * test SNMP Walk OID Loading and Responses SNMP GETBULK operation continues past interface index to interface description [L#134]GETBULK response varbinds (10):
  1. {[1, 3, 6, 1, 2, 1, 2, 2, 1, 1, 1], :auto, 1}
  2. {[1, 3, 6, 1, 2, 1, 2, 2, 1, 1, 2], :auto, 2}
  3. {[1, 3, 6, 1, 2, 1, 2, 2, 1, 2, 1], :auto, "cable-modem0"}
  4. {[1, 3, 6, 1, 2, 1, 2, 2, 1, 2, 2], :auto, "docsis-mac"}
  5. {[1, 3, 6, 1, 2, 1, 2, 2, 1, 3, 1], :auto, 6}
  6. {[1, 3, 6, 1, 2, 1, 2, 2, 1, 3, 2], :auto, 127}
  7. {[1, 3, 6, 1, 2, 1, 2, 2, 1, 4, 1], :auto, 1500}
  8. {[1, 3, 6, 1, 2, 1, 2, 2, 1, 4, 2], :auto, 1518}
  9. {[1, 3, 6, 1, 2, 1, 2, 2, 1, 5, 1], :auto, {:gauge32, 1000000000}}
  10. {[1, 3, 6, 1, 2, 1, 2, 2, 1, 5, 2], :auto, {:gauge32, 38000000}}
  * test SNMP Walk OID Loading and Responses SNMP GETBULK operation continues past interface index to interface description (114.8ms) [L#134]
  * test SNMP Walk OID Loading and Responses OidHandler.get_fallback_next_oid/2 handles the problematic transition [L#97]  * test SNMP Walk OID Loading and Responses OidHandler.get_fallback_next_oid/2 handles the problematic transition (103.7ms) [L#97]
  * test SNMP Walk OID Loading and Responses fallback logic handles interface OID transition from ifIndex.2 to ifDescr.1 [L#46]get_next result: {:ok, {"1.3.6.1.2.1.2.2.1.2.1", :octet_string, "cable-modem0"}}
  * test SNMP Walk OID Loading and Responses fallback logic handles interface OID transition from ifIndex.2 to ifDescr.1 (205.2ms) [L#46]
  * test SNMP Walk OID Loading and Responses walk file data is loaded and interface OIDs are accessible [L#105]✓ 1.3.6.1.2.1.1.1.0 = "Motorola SB6141 DOCSIS 3.0 Cable Modem"
  * test SNMP Walk OID Loading and Responses walk file data is loaded and interface OIDs are accessible (103.9ms) [L#105]

  1) test SNMP Walk OID Loading and Responses walk file data is loaded and interface OIDs are accessible (SnmpSim.SnmpWalkFixTest)
     test/snmp_sim/snmp_walk_fix_test.exs:105
     OID 1.3.6.1.2.1.2.1.0 returned 2, expected {:integer, 2}
     code: Enum.each(working_cases, fn {oid, expected_value} ->
     stacktrace:
       (elixir 1.18.3) lib/enum.ex:987: Enum."-each/2-lists^foreach/1-0-"/2
       test/snmp_sim/snmp_walk_fix_test.exs:113: (test)

  * test SNMP Walk OID Loading and Responses SNMP GETBULK operation returns ALL 50 OIDs from walk file [L#182]Expected 50 OIDs from walk file
Walk returned 50 OIDs
First few OIDs from walk:
{"1.3.6.1.2.1.1.1.0", "Motorola SB6141 DOCSIS 3.0 Cable Modem"}
{"1.3.6.1.2.1.1.2.0", "SNMPv2-SMI::enterprises.4491.2.4.1"}
{"1.3.6.1.2.1.1.3.0", 200}
{"1.3.6.1.2.1.1.4.0", "admin@example.com"}
{"1.3.6.1.2.1.1.5.0", "CM-001A2B3C4D5E"}
Retrieved 50 OIDs via GETBULK walk
First 10 retrieved OIDs:
  1.3.6.1.2.1.1.1.0
  1.3.6.1.2.1.1.2.0
  1.3.6.1.2.1.1.3.0
  1.3.6.1.2.1.1.4.0
  1.3.6.1.2.1.1.5.0
  1.3.6.1.2.1.1.6.0
  1.3.6.1.2.1.1.7.0
  1.3.6.1.2.1.2.1.0
  1.3.6.1.2.1.2.2.1.1.1
  1.3.6.1.2.1.2.2.1.1.2
Last 10 retrieved OIDs:
  1.3.6.1.2.1.2.2.1.5.1
  1.3.6.1.2.1.2.2.1.5.2
  1.3.6.1.2.1.2.2.1.6.1
  1.3.6.1.2.1.2.2.1.6.2
  1.3.6.1.2.1.2.2.1.7.1
  1.3.6.1.2.1.2.2.1.7.2
  1.3.6.1.2.1.2.2.1.8.1
  1.3.6.1.2.1.2.2.1.8.2
  1.3.6.1.2.1.2.2.1.9.1
  1.3.6.1.2.1.2.2.1.9.2
  * test SNMP Walk OID Loading and Responses SNMP GETBULK operation returns ALL 50 OIDs from walk file (140.6ms) [L#182]

SnmpSim.ErrorInjectorTest [test/snmp_sim/error_injector_test.exs]
  * test device failure simulation simulates different failure types [L#269]  * test device failure simulation simulates different failure types (excluded) [L#269]
  * test ErrorInjector startup and basic operations tracks injection statistics [L#57]  * test ErrorInjector startup and basic operations tracks injection statistics (2.4ms) [L#57]
  * test SNMP error injection targets specific OIDs [L#215]  * test SNMP error injection targets specific OIDs (0.3ms) [L#215]
  * test device failure simulation simulates network disconnect [L#314]  * test device failure simulation simulates network disconnect (0.3ms) [L#314]
  * test error condition removal removes specific error types [L#335]  * test error condition removal removes specific error types (0.2ms) [L#335]
  * test malformed response injection injects different corruption types [L#237]  * test malformed response injection injects different corruption types (0.2ms) [L#237]
  * test timeout injection supports burst timeout patterns [L#124]  * test timeout injection supports burst timeout patterns (0.1ms) [L#124]
  * test packet loss injection supports burst packet loss patterns [L#169]  * test packet loss injection supports burst packet loss patterns (0.1ms) [L#169]
  * test ErrorInjector startup and basic operations clears all error conditions [L#77]  * test ErrorInjector startup and basic operations clears all error conditions (0.2ms) [L#77]
  * test device failure simulation simulates power failure [L#295]  * test device failure simulation simulates power failure (0.1ms) [L#295]
  * test ErrorInjector startup and basic operations starts and stops successfully [L#37]  * test ErrorInjector startup and basic operations starts and stops successfully (0.1ms) [L#37]
  * test timeout injection injects timeout errors with configured probability [L#100]  * test timeout injection injects timeout errors with configured probability (0.1ms) [L#100]
  * test packet loss injection injects packet loss with configured rate [L#147]  * test packet loss injection injects packet loss with configured rate (0.1ms) [L#147]
  * test SNMP error injection injects different SNMP error types [L#192]  * test SNMP error injection injects different SNMP error types (0.2ms) [L#192]

SnmpSim.MIB.SharedProfilesBulkTest [test/snmp_sim/mib/shared_profiles_bulk_test.exs]
  * test GETBULK format regression tests demonstrates proper 3-tuple format for device compatibility [L#40]  * test GETBULK format regression tests demonstrates proper 3-tuple format for device compatibility (0.1ms) [L#40]
  * test GETBULK format regression tests verifies the fix prevents format mismatch errors [L#60]  * test GETBULK format regression tests verifies the fix prevents format mismatch errors (0.1ms) [L#60]
  * test GETBULK format regression tests regression test - documents what the original bug was [L#6]  * test GETBULK format regression tests regression test - documents what the original bug was (0.1ms) [L#6]
  * test integration test (if SharedProfiles is available) get_bulk_oids returns proper format when service is running [L#86]  * test integration test (if SharedProfiles is available) get_bulk_oids returns proper format when service is running (1.3ms) [L#86]

SnmpSim.GetBulkOidFormatTest [test/snmp_sim/getbulk_oid_format_test.exs]
  * test SNMP GETBULK OID format fix verification SNMP GETBULK handles different starting OIDs correctly [L#105]  * test SNMP GETBULK OID format fix verification SNMP GETBULK handles different starting OIDs correctly (6266.7ms) [L#105]

  2) test SNMP GETBULK OID format fix verification SNMP GETBULK handles different starting OIDs correctly (SnmpSim.GetBulkOidFormatTest)
     test/snmp_sim/getbulk_oid_format_test.exs:105
     snmpbulkwalk failed for OID 1.3.6.1 with output: Timeout: No Response from 127.0.0.1:10996

     code: for oid <- test_oids do
     stacktrace:
       test/snmp_sim/getbulk_oid_format_test.exs:148: anonymous fn/2 in SnmpSim.GetBulkOidFormatTest."test SNMP GETBULK OID format fix verification SNMP GETBULK handles different starting OIDs correctly"/1
       (elixir 1.18.3) lib/enum.ex:2546: Enum."-reduce/3-lists^foldl/2-0-"/3
       test/snmp_sim/getbulk_oid_format_test.exs:129: (test)

     The following output was logged:
     [error] Error processing SNMP packet: %ArgumentError{message: "errors were found at the given arguments:\n\n  * 1st argument: not a textual representation of an integer\n"}
     [error] Error processing SNMP packet: %ArgumentError{message: "errors were found at the given arguments:\n\n  * 1st argument: not a textual representation of an integer\n"}
     
  * test SNMP GETBULK OID format fix verification regression test - reproduces original bug scenario [L#160]  * test SNMP GETBULK OID format fix verification regression test - reproduces original bug scenario (6273.1ms) [L#160]

  3) test SNMP GETBULK OID format fix verification regression test - reproduces original bug scenario (SnmpSim.GetBulkOidFormatTest)
     test/snmp_sim/getbulk_oid_format_test.exs:160
     Regression detected! Original bug has returned. Output: Timeout: No Response from 127.0.0.1:10995

     code: assert exit_code == 0, "Regression detected! Original bug has returned. Output: #{output}"
     stacktrace:
       test/snmp_sim/getbulk_oid_format_test.exs:192: (test)

     The following output was logged:
     [error] Error processing SNMP packet: %ArgumentError{message: "errors were found at the given arguments:\n\n  * 1st argument: not a textual representation of an integer\n"}
     [error] Error processing SNMP packet: %ArgumentError{message: "errors were found at the given arguments:\n\n  * 1st argument: not a textual representation of an integer\n"}
     [error] Error processing SNMP packet: %ArgumentError{message: "errors were found at the given arguments:\n\n  * 1st argument: not a textual representation of an integer\n"}
     [error] Error processing SNMP packet: %ArgumentError{message: "errors were found at the given arguments:\n\n  * 1st argument: not a textual representation of an integer\n"}
     [error] Error processing SNMP packet: %ArgumentError{message: "errors were found at the given arguments:\n\n  * 1st argument: not a textual representation of an integer\n"}
     [error] Error processing SNMP packet: %ArgumentError{message: "errors were found at the given arguments:\n\n  * 1st argument: not a textual representation of an integer\n"}
     
  * test SNMP GETBULK OID format fix verification SNMP GETBULK works correctly after OID format fix [L#10]  * test SNMP GETBULK OID format fix verification SNMP GETBULK works correctly after OID format fix (6262.8ms) [L#10]

  4) test SNMP GETBULK OID format fix verification SNMP GETBULK works correctly after OID format fix (SnmpSim.GetBulkOidFormatTest)
     test/snmp_sim/getbulk_oid_format_test.exs:10
     SNMP GETBULK failed with exit code 1. Output: Timeout: No Response from 127.0.0.1:10997

     code: assert exit_code == 0, "SNMP GETBULK failed with exit code #{exit_code}. Output: #{output}"
     stacktrace:
       test/snmp_sim/getbulk_oid_format_test.exs:46: (test)

     The following output was logged:
     [error] Error processing SNMP packet: %ArgumentError{message: "errors were found at the given arguments:\n\n  * 1st argument: not a textual representation of an integer\n"}
     [error] Error processing SNMP packet: %ArgumentError{message: "errors were found at the given arguments:\n\n  * 1st argument: not a textual representation of an integer\n"}
     

SnmpSimSnmpExIntegrationTest [test/snmp_sim_snmp_ex_integration_test.exs]
  * test Integration with snmp_ex Library snmp_ex can perform GETNEXT operations [L#227]  * test Integration with snmp_ex Library snmp_ex can perform GETNEXT operations (excluded) [L#227]
  * test Integration with snmp_ex Library snmp_ex can retrieve string values correctly [L#420]  * test Integration with snmp_ex Library snmp_ex can retrieve string values correctly (excluded) [L#420]
  * test Integration with snmp_ex Library snmp_ex concurrent requests work properly [L#379]  * test Integration with snmp_ex Library snmp_ex concurrent requests work properly (excluded) [L#379]
  * test Protocol Compliance and Edge Cases snmp_ex timeout handling works [L#523]  * test Protocol Compliance and Edge Cases snmp_ex timeout handling works (excluded) [L#523]
  * test Integration with snmp_ex Library snmp_ex handles counter values correctly [L#402]  * test Integration with snmp_ex Library snmp_ex handles counter values correctly (excluded) [L#402]
  * test Integration with snmp_ex Library snmp_ex handles lexicographic ordering correctly [L#284]  * test Integration with snmp_ex Library snmp_ex handles lexicographic ordering correctly (excluded) [L#284]
  * test Integration with snmp_ex Library snmp_ex handles end of MIB correctly [L#339]  * test Integration with snmp_ex Library snmp_ex handles end of MIB correctly (excluded) [L#339]
  * test Integration with snmp_ex Library snmp_ex can perform GETBULK operations [L#239]  * test Integration with snmp_ex Library snmp_ex can perform GETBULK operations (excluded) [L#239]
  * test Protocol Compliance and Edge Cases snmp_ex handles SNMPv1 vs v2c correctly [L#505]  * test Protocol Compliance and Edge Cases snmp_ex handles SNMPv1 vs v2c correctly (excluded) [L#505]
  * test Integration with snmp_ex Library snmp_ex can perform GET operations [L#213]  * test Integration with snmp_ex Library snmp_ex can perform GET operations (excluded) [L#213]
  * test Integration with snmp_ex Library snmp_ex GETBULK with non-repeaters [L#259]  * test Integration with snmp_ex Library snmp_ex GETBULK with non-repeaters (excluded) [L#259]
  * test Integration with snmp_ex Library snmp_ex can walk large interface tables efficiently [L#318]  * test Integration with snmp_ex Library snmp_ex can walk large interface tables efficiently (excluded) [L#318]
  * test Integration with snmp_ex Library snmp_ex handles invalid community strings [L#361]  * test Integration with snmp_ex Library snmp_ex handles invalid community strings (excluded) [L#361]

SnmpSim.SNMPWalkRootTest [test/snmp_sim/snmp_walk_root_test.exs]
  * test Device fallback GETNEXT from root OIDs handles GETNEXT from various root OIDs [L#56]  * test Device fallback GETNEXT from root OIDs handles GETNEXT from various root OIDs (3.1ms) [L#56]
  * test End-to-end PDU GETNEXT from root OIDs PDU GETNEXT request from mib-2 root works [L#150]  * test End-to-end PDU GETNEXT from root OIDs PDU GETNEXT request from mib-2 root works (0.3ms) [L#150]
  * test Edge cases and error handling non-existent root returns end of MIB [L#210]  * test Edge cases and error handling non-existent root returns end of MIB (0.2ms) [L#210]
  * test Device fallback GETNEXT from root OIDs GETNEXT walk progression works correctly [L#84]  * test Device fallback GETNEXT from root OIDs GETNEXT walk progression works correctly (0.2ms) [L#84]
  * test Device fallback GETNEXT from root OIDs handles GETNEXT from mib-2 root (1.3.6.1.2.1) [L#30]  * test Device fallback GETNEXT from root OIDs handles GETNEXT from mib-2 root (1.3.6.1.2.1) (0.2ms) [L#30]
  * test SharedProfiles GETNEXT from root OIDs integration test with loaded profile [L#108]  * test SharedProfiles GETNEXT from root OIDs integration test with loaded profile (1.5ms) [L#108]
  * test End-to-end PDU GETNEXT from root OIDs PDU GETNEXT walk simulation from various roots [L#177]  * test End-to-end PDU GETNEXT from root OIDs PDU GETNEXT walk simulation from various roots (0.1ms) [L#177]
  * test Edge cases and error handling handles edge case OIDs gracefully [L#225]  * test Edge cases and error handling handles edge case OIDs gracefully (0.1ms) [L#225]

SnmpSimErlangSnmpIntegrationSimpleTest [test/snmp_sim_erlang_snmp_integration_simple_test.exs]
  * test Erlang SNMP Manager Integration Erlang SNMP manager can perform GETNEXT operations [L#107]  * test Erlang SNMP Manager Integration Erlang SNMP manager can perform GETNEXT operations (excluded) [L#107]
  * test Erlang SNMP Manager Integration Erlang SNMP handles end of MIB correctly [L#171]  * test Erlang SNMP Manager Integration Erlang SNMP handles end of MIB correctly (excluded) [L#171]
  * test Erlang SNMP Manager Integration Erlang SNMP manager can perform GETBULK operations [L#129]  * test Erlang SNMP Manager Integration Erlang SNMP manager can perform GETBULK operations (excluded) [L#129]
  * test Erlang SNMP Manager Integration Erlang SNMP manager can perform GET operations [L#87]  * test Erlang SNMP Manager Integration Erlang SNMP manager can perform GET operations (excluded) [L#87]
  * test Erlang SNMP Manager Integration Erlang SNMP timeout handling works [L#154]  * test Erlang SNMP Manager Integration Erlang SNMP timeout handling works (excluded) [L#154]

SnmpSim.GetbulkEndOfMibSimpleTest [test/snmp_sim/getbulk_end_of_mib_simple_test.exs]
  * test Core GETBULK end-of-MIB fixes get_next_oid on last OID returns end_of_mib [L#59]  * test Core GETBULK end-of-MIB fixes get_next_oid on last OID returns end_of_mib (0.1ms) [L#59]
  * test Edge cases GETBULK with max_repetitions 0 returns empty list [L#211]  * test Edge cases GETBULK with max_repetitions 0 returns empty list (0.1ms) [L#211]
  * test Edge cases empty walk file handling [L#183]  * test Edge cases empty walk file handling (0.1ms) [L#183]
  * test Edge cases large GETBULK requests don't cause issues [L#194]  * test Edge cases large GETBULK requests don't cause issues (0.3ms) [L#194]
  * test Core GETBULK end-of-MIB fixes get_bulk_oids does not include starting OID in results [L#76]  * test Core GETBULK end-of-MIB fixes get_bulk_oids does not include starting OID in results (0.4ms) [L#76]
  * test OID progression validation get_next_oid progression covers all OIDs without loops [L#133]  * test OID progression validation get_next_oid progression covers all OIDs without loops (0.3ms) [L#133]
  * test Core GETBULK end-of-MIB fixes get_bulk_oids from last OID returns empty list [L#63]  * test Core GETBULK end-of-MIB fixes get_bulk_oids from last OID returns empty list (0.1ms) [L#63]
  * test Edge cases GETBULK with max_repetitions 1 returns at most 1 OID [L#215]  * test Edge cases GETBULK with max_repetitions 1 returns at most 1 OID (0.1ms) [L#215]
  * test Core GETBULK end-of-MIB fixes get_next_oid does not return same OID (fixes infinite loop) [L#42]  * test Core GETBULK end-of-MIB fixes get_next_oid does not return same OID (fixes infinite loop) (0.3ms) [L#42]
  * test Core GETBULK end-of-MIB fixes get_bulk_oids from second-to-last OID returns only last OID [L#68]  * test Core GETBULK end-of-MIB fixes get_bulk_oids from second-to-last OID returns only last OID (0.1ms) [L#68]
  * test Core GETBULK end-of-MIB fixes get_bulk_oids simulates complete walk without infinite loops [L#98]GETBULK walk completed in 4 iterations, collected 8 OIDs
  * test Core GETBULK end-of-MIB fixes get_bulk_oids simulates complete walk without infinite loops (0.4ms) [L#98]
  * test OID progression validation OID comparison function works correctly [L#161]  * test OID progression validation OID comparison function works correctly (0.1ms) [L#161]

SnmpSim.GetbulkFixesTest [test/snmp_sim/getbulk_fixes_test.exs]
  * test Critical GETBULK fixes validation get_bulk_oids from broad OID completes quickly [L#52]✓ FIXED: GETBULK from 1.3.6.1 returned 10 OIDs in 3ms
  * test Critical GETBULK fixes validation get_bulk_oids from broad OID completes quickly (2.6ms) [L#52]
  * test End-of-MIB behavior validation GETBULK at end of MIB returns empty list [L#157]✓ FIXED: GETBULK from high OID 1.3.6.1.4.1.99999.99999.99999 correctly returned empty list
  * test End-of-MIB behavior validation GETBULK at end of MIB returns empty list (0.4ms) [L#157]
  * test Performance and stability validation GETBULK with various max_repetitions values [L#205]✓ FIXED: GETBULK works correctly with various max_repetitions values
  * test Performance and stability validation GETBULK with various max_repetitions values (16.9ms) [L#205]
  * test Critical GETBULK fixes validation get_bulk_oids does not include starting OID [L#81]✓ FIXED: GETBULK from 1.3.6.1.2.1.1.1.0 correctly excluded starting OID
  * test Critical GETBULK fixes validation get_bulk_oids does not include starting OID (1.5ms) [L#81]
  * test Critical GETBULK fixes validation get_next_oid does not return same OID (infinite loop fix) [L#31]✓ FIXED: get_next_oid(1.3.6.1.2.1.2.2.1.21.1) = 1.3.6.1.2.1.2.2.1.21.2
  * test Critical GETBULK fixes validation get_next_oid does not return same OID (infinite loop fix) (0.4ms) [L#31]
  * test Critical GETBULK fixes validation get_bulk_oids walk simulation completes [L#109]✓ FIXED: GETBULK walk completed: 11 iterations, 50 OIDs, 15ms
  * test Critical GETBULK fixes validation get_bulk_oids walk simulation completes (14.5ms) [L#109]
  * test Performance and stability validation repeated GETBULK calls are consistent [L#181]✓ FIXED: 3 repeated GETBULK calls returned consistent results
  * test Performance and stability validation repeated GETBULK calls are consistent (2.8ms) [L#181]

SnmpSimStabilityTest [test/snmp_sim_stability_test.exs]
  * test sustained load handling for 60 minutes [L#155]  * test sustained load handling for 60 minutes (excluded) [L#155]
  * test system recovery after various failure scenarios [L#293]  * test system recovery after various failure scenarios (excluded) [L#293]
  * test endurance test for 4 hours [L#207]  * test endurance test for 4 hours (excluded) [L#207]
  * test memory stability over 30 minutes [L#102]  * test memory stability over 30 minutes (excluded) [L#102]
  * test stress test with 100 concurrent devices [L#243]  * test stress test with 100 concurrent devices (excluded) [L#243]

SnmpSim.ConfigApplicationNameTest [test/snmp_sim/config_application_name_test.exs]
  * test Configuration application name consistency config files reference correct application name [L#23]  * test Configuration application name consistency config files reference correct application name (1.3ms) [L#23]
  * test Configuration application name consistency application can start without configuration errors [L#43]  * test Configuration application name consistency application can start without configuration errors (5.9ms) [L#43]
  * test Configuration application name consistency mix.exs defines application name as :snmp_sim [L#12]  * test Configuration application name consistency mix.exs defines application name as :snmp_sim (0.2ms) [L#12]

SnmpSim.OIDTreeTest [test/snmp_sim/oid_tree_test.exs]
  * test OID Tree Creation and Basic Operations inserts single OID with value [L#15]  * test OID Tree Creation and Basic Operations inserts single OID with value (0.1ms) [L#15]
  * test Lexicographic Ordering and GETNEXT get_next with interface table traversal [L#128]  * test Lexicographic Ordering and GETNEXT get_next with interface table traversal (0.1ms) [L#128]
  * test Lexicographic Ordering and GETNEXT get_next with partial OID matches correctly [L#114]  * test Lexicographic Ordering and GETNEXT get_next with partial OID matches correctly (0.1ms) [L#114]
  * test GETBULK Operations bulk_walk with zero max_repetitions returns empty [L#197]  * test GETBULK Operations bulk_walk with zero max_repetitions returns empty (0.1ms) [L#197]
  * test Performance with Large OID Trees GETNEXT traversal is efficient on large trees [L#272]  * test Performance with Large OID Trees GETNEXT traversal is efficient on large trees (2.3ms) [L#272]
  * test GETBULK Operations bulk_walk from middle of tree [L#202]  * test GETBULK Operations bulk_walk from middle of tree (0.1ms) [L#202]
  * test GETBULK Operations bulk_walk beyond end of tree [L#224]  * test GETBULK Operations bulk_walk beyond end of tree (0.1ms) [L#224]
  * test Lexicographic Ordering and GETNEXT get_next returns end_of_mib when no more OIDs [L#123]  * test Lexicographic Ordering and GETNEXT get_next returns end_of_mib when no more OIDs (0.1ms) [L#123]
  * test OID Tree Creation and Basic Operations handles non-existent OID lookup [L#49]  * test OID Tree Creation and Basic Operations handles non-existent OID lookup (0.08ms) [L#49]
  * test Lexicographic Ordering and GETNEXT maintains lexicographic order for OID list [L#86]  * test Lexicographic Ordering and GETNEXT maintains lexicographic order for OID list (0.1ms) [L#86]
  * test OID Tree Creation and Basic Operations inserts multiple OIDs [L#24]  * test OID Tree Creation and Basic Operations inserts multiple OIDs (0.08ms) [L#24]
  * test GETBULK Operations bulk_walk returns correct number of results [L#181]  * test GETBULK Operations bulk_walk returns correct number of results (0.1ms) [L#181]
  * test OID Tree Creation and Basic Operations creates new empty tree [L#7]  * test OID Tree Creation and Basic Operations creates new empty tree (0.07ms) [L#7]
  * test OID Tree Creation and Basic Operations inserts OID with behavior information [L#39]  * test OID Tree Creation and Basic Operations inserts OID with behavior information (0.08ms) [L#39]
  * test OID Tree Creation and Basic Operations overwrites existing OID value [L#57]  * test OID Tree Creation and Basic Operations overwrites existing OID value (0.1ms) [L#57]
  * test Performance with Large OID Trees handles large OID trees efficiently [L#233]  * test Performance with Large OID Trees handles large OID trees efficiently (0.9ms) [L#233]
  * test Lexicographic Ordering and GETNEXT get_next returns correct next OID [L#102]  * test Lexicographic Ordering and GETNEXT get_next returns correct next OID (0.1ms) [L#102]
  * test GETBULK Operations bulk_walk near end of tree [L#215]  * test GETBULK Operations bulk_walk near end of tree (0.1ms) [L#215]
  * test Performance with Large OID Trees memory usage scales reasonably with tree size [L#316]  * test Performance with Large OID Trees memory usage scales reasonably with tree size (1.2ms) [L#316]

SnmpSim.Core.ServerTest [test/snmp_sim/core/server_test.exs]
  * test UDP Server handles invalid community strings [L#137]  * test UDP Server handles invalid community strings (excluded) [L#137]
  * test UDP Server processes 100+ requests per second [L#49]  * test UDP Server processes 100+ requests per second (1.4ms) [L#49]
  * test Performance Monitoring tracks processing times [L#247]  * test Performance Monitoring tracks processing times (211.6ms) [L#247]
  * test UDP Server updates device handler correctly [L#155]  * test UDP Server updates device handler correctly (0.9ms) [L#155]
  * test Error Handling handles malformed packets gracefully [L#202]  * test Error Handling handles malformed packets gracefully (101.0ms) [L#202]
  * test UDP Server manages socket resources efficiently [L#112]  * test UDP Server manages socket resources efficiently (104.3ms) [L#112]
  * test UDP Server handles concurrent requests without blocking [L#9]  * test UDP Server handles concurrent requests without blocking (3.5ms) [L#9]
  * test Error Handling handles port conflicts gracefully [L#186]  * test Error Handling handles port conflicts gracefully (0.9ms) [L#186]
  * test Error Handling handles handler errors gracefully [L#222]  * test Error Handling handles handler errors gracefully (105.3ms) [L#222]

SnmpSimPhase4IntegrationTest [test/snmp_sim_phase4_integration_test.exs]
  * test Phase 4: Performance and Scale Testing memory usage remains reasonable [L#426]  * test Phase 4: Performance and Scale Testing memory usage remains reasonable (excluded) [L#426]
  * test Phase 4: Performance and Scale Testing handles medium scale device population [L#375]  * test Phase 4: Performance and Scale Testing handles medium scale device population (excluded) [L#375]
  * test Phase 4: End-to-End Integration device distribution patterns work correctly [L#85]  * test Phase 4: End-to-End Integration device distribution patterns work correctly (8.8ms) [L#85]
  * test Phase 4: Error Scenarios and Recovery handles rapid device creation and destruction [L#513]  * test Phase 4: Error Scenarios and Recovery handles rapid device creation and destruction (104.6ms) [L#513]
  * test Phase 4: Error Scenarios and Recovery recovers from device process failures [L#456]  * test Phase 4: Error Scenarios and Recovery recovers from device process failures (303.9ms) [L#456]
  * test Phase 4: End-to-End Integration concurrent device access patterns [L#221]  * test Phase 4: End-to-End Integration concurrent device access patterns (13.2ms) [L#221]
  * test Phase 4: End-to-End Integration predefined device mix startup patterns [L#326]  * test Phase 4: End-to-End Integration predefined device mix startup patterns (16.0ms) [L#326]
  * test Phase 4: End-to-End Integration multi-device startup scales properly [L#119]  * test Phase 4: End-to-End Integration multi-device startup scales properly (1.8ms) [L#119]
  * test Phase 4: End-to-End Integration complete lazy device pool lifecycle [L#29]  * test Phase 4: End-to-End Integration complete lazy device pool lifecycle (0.4ms) [L#29]
  * test Phase 4: End-to-End Integration device characteristics affect behavior [L#179]  * test Phase 4: End-to-End Integration device characteristics affect behavior (0.3ms) [L#179]
  * test Phase 4: End-to-End Integration device cleanup and idle management [L#271]  * test Phase 4: End-to-End Integration device cleanup and idle management (714.5ms) [L#271]

SnmpSimPhase2IntegrationTest [test/snmp_sim_phase2_integration_test.exs]
  * test Enhanced Behavior Integration device starts successfully with enhanced behaviors [L#92]  * test Enhanced Behavior Integration device starts successfully with enhanced behaviors (excluded) [L#92]
  * test Enhanced Behavior Integration loads walk file with custom behavior configuration [L#55]  * test Enhanced Behavior Integration loads walk file with custom behavior configuration (7.1ms) [L#55]
  * test Performance with Enhanced Behaviors enhanced behaviors don't significantly impact performance [L#233]  * test Performance with Enhanced Behaviors enhanced behaviors don't significantly impact performance (4.2ms) [L#233]
  * test Performance with Enhanced Behaviors multiple devices with enhanced behaviors can be created [L#258]  * test Performance with Enhanced Behaviors multiple devices with enhanced behaviors can be created (154.2ms) [L#258]
  * test Time-based Pattern Verification placeholder test to ensure describe block has at least one test [L#160]  * test Time-based Pattern Verification placeholder test to ensure describe block has at least one test (0.6ms) [L#160]
  * test Error Handling and Edge Cases handles missing behavior gracefully [L#197]  * test Error Handling and Edge Cases handles missing behavior gracefully (0.6ms) [L#197]
  * test Enhanced Behavior Integration loads walk file with automatic behavior enhancement [L#26]  * test Enhanced Behavior Integration loads walk file with automatic behavior enhancement (3.0ms) [L#26]
  * test Enhanced Behavior Integration applies preset behaviors correctly [L#124]  * test Enhanced Behavior Integration applies preset behaviors correctly (2.6ms) [L#124]
  * test Behavior Configuration System custom behavior configurations load successfully [L#166]  * test Behavior Configuration System custom behavior configurations load successfully (1.3ms) [L#166]
  * test Error Handling and Edge Cases handles invalid behavior configuration gracefully [L#214]  * test Error Handling and Edge Cases handles invalid behavior configuration gracefully (1.0ms) [L#214]

SnmpSim.DeviceDistributionTest [test/snmp_sim/device_distribution_test.exs]
  * test default port assignments default assignments cover expected port counts [L#24]  * test default port assignments default assignments cover expected port counts (0.3ms) [L#24]
  * test port assignment building assigns largest device types first [L#156]  * test port assignment building assigns largest device types first (0.2ms) [L#156]
  * test port assignment building handles empty device mix [L#135]  * test port assignment building handles empty device mix (0.2ms) [L#135]
  * test density statistics identifies largest and smallest groups [L#204]  * test density statistics identifies largest and smallest groups (0.3ms) [L#204]
  * test port assignment validation validates non-overlapping port assignments [L#318]  * test port assignment validation validates non-overlapping port assignments (0.2ms) [L#318]
  * test device ID generation generates default device IDs [L#281]  * test device ID generation generates default device IDs (0.2ms) [L#281]
  * test port assignment validation detects invalid ranges [L#338]  * test port assignment validation detects invalid ranges (0.2ms) [L#338]
  * test density statistics handles single device type [L#221]  * test density statistics handles single device type (0.2ms) [L#221]
  * test device characteristics provides different characteristics for different device types [L#251]  * test device characteristics provides different characteristics for different device types (0.2ms) [L#251]
  * test port assignment validation validates reasonable distribution sizes [L#348]  * test port assignment validation validates reasonable distribution sizes (0.3ms) [L#348]
  * test port assignment building raises error when not enough ports [L#143]  * test port assignment building raises error when not enough ports (0.2ms) [L#143]
  * test device mix patterns provides valid cable network mix [L#72]  * test device mix patterns provides valid cable network mix (0.2ms) [L#72]
  * test device mix patterns provides test mixes with reasonable scales [L#97]  * test device mix patterns provides test mixes with reasonable scales (0.2ms) [L#97]
  * test device type determination determines device type from port [L#38]  * test device type determination determines device type from port (0.2ms) [L#38]
  * test device ID generation generates hostname-based device IDs [L#298]  * test device ID generation generates hostname-based device IDs (0.2ms) [L#298]
  * test density statistics calculates density statistics correctly [L#175]  * test density statistics calculates density statistics correctly (3.8ms) [L#175]
  * test default port assignments returns valid default port assignments [L#7]  * test default port assignments returns valid default port assignments (0.2ms) [L#7]
  * test device type determination handles edge cases in port ranges [L#58]  * test device type determination handles edge cases in port ranges (0.2ms) [L#58]
  * test device mix patterns provides valid enterprise network mix [L#85]  * test device mix patterns provides valid enterprise network mix (0.2ms) [L#85]
  * test port assignment validation detects overlapping port assignments [L#327]  * test port assignment validation detects overlapping port assignments (0.2ms) [L#327]
  * test device characteristics handles unknown device types gracefully [L#269]  * test device characteristics handles unknown device types gracefully (0.1ms) [L#269]
  * test port assignment building builds assignments from device mix [L#112]  * test port assignment building builds assignments from device mix (0.1ms) [L#112]
  * test device characteristics provides characteristics for known device types [L#236]  * test device characteristics provides characteristics for known device types (0.1ms) [L#236]
  * test port assignment validation validates edge cases [L#363]  * test port assignment validation validates edge cases (0.2ms) [L#363]
  * test device ID generation generates MAC-based device IDs [L#289]  * test device ID generation generates MAC-based device IDs (0.1ms) [L#289]
  * test device ID generation generates serial-based device IDs [L#307]  * test device ID generation generates serial-based device IDs (0.1ms) [L#307]

SnmpSim.Performance.PerformanceTest [test/snmp_sim/performance/performance_test.exs]
  * test Large Scale Performance Tests sustains 100K+ requests/second throughput [L#137]  * test Large Scale Performance Tests sustains 100K+ requests/second throughput (excluded) [L#137]
  * test Scaling and Efficiency Tests scales performance linearly with device count [L#407]  * test Scaling and Efficiency Tests scales performance linearly with device count (excluded) [L#407]
  * test Large Scale Performance Tests maintains memory usage under 1GB for 10K devices [L#172]  * test Large Scale Performance Tests maintains memory usage under 1GB for 10K devices (excluded) [L#172]
  * test Large Scale Performance Tests handles 10K+ concurrent devices [L#83]  * test Large Scale Performance Tests handles 10K+ concurrent devices (excluded) [L#83]
  * test Large Scale Performance Tests achieves sub-5ms response times for cached lookups [L#228]  * test Large Scale Performance Tests achieves sub-5ms response times for cached lookups (excluded) [L#228]
  * test Resource Management Tests automatically cleans up idle devices [L#331]  * test Resource Management Tests automatically cleans up idle devices (excluded) [L#331]
  * test Scaling and Efficiency Tests maintains stable performance over 24+ hour simulation [L#443]  * test Scaling and Efficiency Tests maintains stable performance over 24+ hour simulation (excluded) [L#443]
  * test Resource Management Tests enforces device and memory limits correctly [L#309]  * test Resource Management Tests enforces device and memory limits correctly (3.9ms) [L#309]

SnmpSimIntegrationTest [test/snmp_sim_integration_test.exs]
  * test Error Handling and Edge Cases handles invalid community strings [L#421]  * test Error Handling and Edge Cases handles invalid community strings (excluded) [L#421]
  * test End-to-End Device Simulation handles GETNEXT operations correctly [L#85]  * test End-to-End Device Simulation handles GETNEXT operations correctly (106.7ms) [L#85]
  * test Error Handling and Edge Cases device population handles mixed success/failure [L#512]  * test Error Handling and Edge Cases device population handles mixed success/failure (3.0ms) [L#512]
  * test Error Handling and Edge Cases handles port conflicts gracefully [L#450]  * test Error Handling and Edge Cases handles port conflicts gracefully (5.2ms) [L#450]
  * test End-to-End Device Simulation device info and statistics work correctly [L#188]  * test End-to-End Device Simulation device info and statistics work correctly (105.6ms) [L#188]
  * test Performance and Reliability handles multiple concurrent requests per device [L#293]  * test Performance and Reliability handles multiple concurrent requests per device (110.3ms) [L#293]
  * test End-to-End Device Simulation responds with proper error for non-existent OIDs [L#119]  * test End-to-End Device Simulation responds with proper error for non-existent OIDs (107.3ms) [L#119]
  * test End-to-End Device Simulation loads profile and starts device successfully [L#47]  * test End-to-End Device Simulation loads profile and starts device successfully (108.5ms) [L#47]
  * test End-to-End Device Simulation handles multiple devices simultaneously [L#151]  * test End-to-End Device Simulation handles multiple devices simultaneously (4.4ms) [L#151]
  * test End-to-End Device Simulation device reboot functionality works [L#221]  * test End-to-End Device Simulation device reboot functionality works (157.0ms) [L#221]
  * test Performance and Reliability device memory usage remains stable [L#336]  * test Performance and Reliability device memory usage remains stable (485.9ms) [L#336]

SnmpSim.LazyDevicePoolTest [test/snmp_sim/lazy_device_pool_test.exs]
  * test device lifecycle management updates last access time to prevent cleanup [L#193]  * test device lifecycle management updates last access time to prevent cleanup (excluded) [L#193]
  * test device lifecycle management cleans up idle devices after timeout [L#169]  * test device lifecycle management cleans up idle devices after timeout (excluded) [L#169]
  * test device creation reuses existing device on subsequent access [L#54]  * test device creation reuses existing device on subsequent access (1.2ms) [L#54]
  * test device shutdown handles shutdown of non-existent device [L#232]  * test device shutdown handles shutdown of non-existent device (0.5ms) [L#232]
  * test port assignment configuration configures custom port assignments [L#266]  * test port assignment configuration configures custom port assignments (0.7ms) [L#266]
  * test statistics tracking tracks device creation statistics [L#282]  * test statistics tracking tracks device creation statistics (0.8ms) [L#282]
  * test concurrent access handles concurrent device creation safely [L#313]  * test concurrent access handles concurrent device creation safely (0.5ms) [L#313]
  * test device shutdown shuts down specific device [L#217]  * test device shutdown shuts down specific device (0.5ms) [L#217]
  * test device creation respects max device limit [L#99]  * test device creation respects max device limit (0.6ms) [L#99]
  * test device lifecycle management recreates device if it dies [L#126]  * test device lifecycle management recreates device if it dies (202.0ms) [L#126]
  * test device creation creates different devices for different ports [L#72]  * test device creation creates different devices for different ports (1.2ms) [L#72]
  * test device shutdown shuts down all devices [L#238]  * test device shutdown shuts down all devices (1.1ms) [L#238]
  * test device creation creates device on first access [L#36]  * test device creation creates device on first access (0.6ms) [L#36]
  * test device creation determines device type based on port range [L#86]  * test device creation determines device type based on port range (0.5ms) [L#86]
  * test device creation handles unknown port ranges [L#117]  * test device creation handles unknown port ranges (0.3ms) [L#117]
  * test concurrent access handles concurrent access to different ports [L#342]  * test concurrent access handles concurrent access to different ports (1.2ms) [L#342]
  * test statistics tracking tracks peak device count [L#297]  * test statistics tracking tracks peak device count (0.6ms) [L#297]

SnmpSim.BehaviorConfigTest [test/snmp_sim/behavior_config_test.exs]
  * test Behavior Presets CMTS realistic preset has appropriate high-capacity settings [L#39]  * test Behavior Presets CMTS realistic preset has appropriate high-capacity settings (0.4ms) [L#39]
  * test Custom Behavior Creation normalizes behavior specifications [L#240]  * test Custom Behavior Creation normalizes behavior specifications (0.3ms) [L#240]
  * test Custom Behavior Creation creates custom behavior configuration [L#202]  * test Custom Behavior Creation creates custom behavior configuration (0.3ms) [L#202]
  * test Realistic Error Behaviors applies error behaviors to error counter OIDs [L#275]  * test Realistic Error Behaviors applies error behaviors to error counter OIDs (0.2ms) [L#275]
  * test Multiple Behavior Application applies multiple behaviors in sequence [L#315]  * test Multiple Behavior Application applies multiple behaviors in sequence (0.2ms) [L#315]
  * test Custom Behavior Creation validates behavior specifications [L#225]  * test Custom Behavior Creation validates behavior specifications (0.2ms) [L#225]
  * test Behavior Application applies realistic counters to walk file profile [L#79]  * test Behavior Application applies realistic counters to walk file profile (0.2ms) [L#79]
  * test Behavior Application applies increment counters with specific OID patterns [L#129]  * test Behavior Application applies increment counters with specific OID patterns (0.3ms) [L#129]
  * test Behavior Presets high traffic simulation preset has multipliers [L#56]  * test Behavior Presets high traffic simulation preset has multipliers (0.2ms) [L#56]
  * test Available Behaviors Listing lists all available behavior categories [L#258]  * test Available Behaviors Listing lists all available behavior categories (0.2ms) [L#258]
  * test Behavior Presets cable modem realistic preset contains appropriate behaviors [L#7]  * test Behavior Presets cable modem realistic preset contains appropriate behaviors (0.2ms) [L#7]
  * test Behavior Presets returns error for unknown preset [L#72]  * test Behavior Presets returns error for unknown preset (0.2ms) [L#72]
  * test Behavior Application applies daily patterns to appropriate OIDs [L#106]  * test Behavior Application applies daily patterns to appropriate OIDs (0.2ms) [L#106]
  * test Behavior Application applies gauge behaviors with range constraints [L#167]  * test Behavior Application applies gauge behaviors with range constraints (0.1ms) [L#167]

SnmpSim.ComprehensiveWalkTest [test/snmp_sim/comprehensive_walk_test.exs]
  * test Walk Functionality - All Versions SNMPv2c walk returns consistent format [L#55]  * test Walk Functionality - All Versions SNMPv2c walk returns consistent format (0.5ms) [L#55]
  * test Walk Format Consistency walk_oid_recursive handles OID format conversions [L#215]  * test Walk Format Consistency walk_oid_recursive handles OID format conversions (0.4ms) [L#215]
  * test Walk Error Handling walk reaches end of MIB view [L#184]  * test Walk Error Handling walk reaches end of MIB view (0.3ms) [L#184]
  * test Walk Performance and Limits walk respects recursion limits [L#245]  * test Walk Performance and Limits walk respects recursion limits (0.4ms) [L#245]
  * test Walk Performance and Limits walk completes within reasonable time [L#256]  * test Walk Performance and Limits walk completes within reasonable time (0.4ms) [L#256]
  * test Walk Integration with Different Device Types walk works with different device profiles [L#288]  * test Walk Integration with Different Device Types walk works with different device profiles (0.4ms) [L#288]
  * test Walk Format Consistency get_next_oid returns consistent format [L#196]  * test Walk Format Consistency get_next_oid returns consistent format (0.3ms) [L#196]
  * test Walk Functionality - All Versions GETBULK operation - SNMPv2c only [L#127]  * test Walk Functionality - All Versions GETBULK operation - SNMPv2c only (0.3ms) [L#127]
  * test Walk Error Handling walk with invalid OID format [L#164]  * test Walk Error Handling walk with invalid OID format (0.3ms) [L#164]
  * test Walk Functionality - All Versions walk with GETNEXT sequence - SNMPv1 [L#71]  * test Walk Functionality - All Versions walk with GETNEXT sequence - SNMPv1 (0.3ms) [L#71]
  * test Walk Format Consistency fallback functions return proper format [L#227]  * test Walk Format Consistency fallback functions return proper format (0.3ms) [L#227]
  * test Walk Functionality - All Versions SNMPv1 walk returns consistent format [L#36]  * test Walk Functionality - All Versions SNMPv1 walk returns consistent format (0.4ms) [L#36]
  * test Walk Functionality - All Versions walk with GETNEXT sequence - SNMPv2c [L#99]  * test Walk Functionality - All Versions walk with GETNEXT sequence - SNMPv2c (0.4ms) [L#99]
  * test Walk Error Handling walk with non-existent OID subtree [L#157]  * test Walk Error Handling walk with non-existent OID subtree (0.4ms) [L#157]
  * test Walk Error Handling walk with empty OID [L#174]  * test Walk Error Handling walk with empty OID (0.2ms) [L#174]
  * test Walk Performance and Limits concurrent walks don't interfere [L#269]  * test Walk Performance and Limits concurrent walks don't interfere (0.3ms) [L#269]

SnmpSim.ErrorInjectionIntegrationTest [test/snmp_sim/error_injection_integration_test.exs]
  * test Error injection integration Device processes error injection messages [L#66]  * test Error injection integration Device processes error injection messages (11.0ms) [L#66]
  * test Scenario validation Scenario ID generation is unique [L#275]  * test Scenario validation Scenario ID generation is unique (6.3ms) [L#275]
  * test Error injection persistence Statistics tracking works correctly [L#237]  * test Error injection persistence Statistics tracking works correctly (0.3ms) [L#237]
  * test Scenario validation Scenario with empty device list [L#263]  * test Scenario validation Scenario with empty device list (0.2ms) [L#263]
  * test Test scenario integration Network outage scenario affects device [L#134]  * test Test scenario integration Network outage scenario affects device (51.1ms) [L#134]
  * test Test scenario integration Multi-scenario test [L#181]  * test Test scenario integration Multi-scenario test (102.2ms) [L#181]
  * test Error injection integration Device failure simulation [L#92]  * test Error injection integration Device failure simulation (151.7ms) [L#92]
  * test Error injection integration ErrorInjector can communicate with Device [L#35]  * test Error injection integration ErrorInjector can communicate with Device (1.3ms) [L#35]
  * test Error injection integration SNMP error injection [L#115]  * test Error injection integration SNMP error injection (0.9ms) [L#115]
  * test Test scenario integration Signal degradation scenario [L#158]  * test Test scenario integration Signal degradation scenario (52.0ms) [L#158]
  * test Error injection persistence Clear all errors removes all conditions [L#210]  * test Error injection persistence Clear all errors removes all conditions (12.4ms) [L#210]

SnmpSim.ValueSimulatorPhase5Test [test/snmp_sim/value_simulator_phase5_test.exs]
  * test counter wrapping functionality handles 64-bit counter wrapping correctly [L#24]  * test counter wrapping functionality handles 64-bit counter wrapping correctly (0.8ms) [L#24]
  * test configurable jitter and variance device_specific variance reflects device characteristics [L#322]  * test configurable jitter and variance device_specific variance reflects device characteristics (0.5ms) [L#322]
  * test configurable jitter and variance variance types produce different distributions [L#220]  * test configurable jitter and variance variance types produce different distributions (0.7ms) [L#220]
  * test realistic gauge simulation with jitter cpu gauge includes device-specific jitter [L#405]  * test realistic gauge simulation with jitter cpu gauge includes device-specific jitter (0.3ms) [L#405]
  * test performance characteristics value simulation executes quickly [L#528]  * test performance characteristics value simulation executes quickly (2.3ms) [L#528]
  * test realistic gauge simulation with jitter temperature gauge maintains realistic ranges with jitter [L#422]  * test realistic gauge simulation with jitter temperature gauge maintains realistic ranges with jitter (0.4ms) [L#422]
  * test integration with time patterns and correlations error counter includes correlation with utilization [L#476]  * test integration with time patterns and correlations error counter includes correlation with utilization (0.2ms) [L#476]
  * test configurable jitter and variance time_correlated variance changes over time [L#283]  * test configurable jitter and variance time_correlated variance changes over time (0.2ms) [L#283]
  * test counter wrapping functionality apply_device_specific_counter_behavior varies by device type [L#74]  * test counter wrapping functionality apply_device_specific_counter_behavior varies by device type (0.2ms) [L#74]
  * test configurable jitter and variance apply_configurable_jitter works with different patterns [L#141]  * test configurable jitter and variance apply_configurable_jitter works with different patterns (0.2ms) [L#141]
  * test counter wrapping functionality counter_approaching_wrap? detects near-wrap conditions [L#43]  * test counter wrapping functionality counter_approaching_wrap? detects near-wrap conditions (0.2ms) [L#43]
  * test realistic gauge simulation with jitter utilization gauge includes jitter [L#388]  * test realistic gauge simulation with jitter utilization gauge includes jitter (0.2ms) [L#388]
  * test counter wrapping functionality handles 32-bit counter wrapping correctly [L#6]  * test counter wrapping functionality handles 32-bit counter wrapping correctly (0.2ms) [L#6]
  * test counter wrapping functionality time_until_counter_wrap calculates correctly [L#56]  * test counter wrapping functionality time_until_counter_wrap calculates correctly (0.2ms) [L#56]
  * test counter wrapping functionality handle_counter_discontinuity detects wraps [L#111]  * test counter wrapping functionality handle_counter_discontinuity detects wraps (0.2ms) [L#111]
  * test integration with time patterns and correlations signal gauge responds to environmental factors [L#503]  * test integration with time patterns and correlations signal gauge responds to environmental factors (0.2ms) [L#503]
  * test configurable jitter and variance different device types have different jitter characteristics [L#193]  * test configurable jitter and variance different device types have different jitter characteristics (0.2ms) [L#193]
  * test integration with time patterns and correlations traffic counter simulation integrates all Phase 5 features [L#442]  * test integration with time patterns and correlations traffic counter simulation integrates all Phase 5 features (0.2ms) [L#442]
  * test performance characteristics counter wrapping detection is efficient [L#551]  * test performance characteristics counter wrapping detection is efficient (2.5ms) [L#551]

SnmpSimPhase3IntegrationTest [test/snmp_sim_phase3_integration_test.exs]
  * test Performance and Scalability placeholder test to ensure describe block has at least one test [L#34]  * test Performance and Scalability placeholder test to ensure describe block has at least one test (0.2ms) [L#34]
  * test Phase 3: OID Tree and GETBULK Integration placeholder test to ensure describe block has at least one test [L#25]  * test Phase 3: OID Tree and GETBULK Integration placeholder test to ensure describe block has at least one test (0.2ms) [L#25]

SnmpSim.SNMPOperationsTest [test/snmp_sim/snmp_operations_test.exs]
  * test Device SNMP operations simulated SNMP walk returns sequential OIDs with proper types [L#72]  * test Device SNMP operations simulated SNMP walk returns sequential OIDs with proper types (102.8ms) [L#72]
  * test Device SNMP operations non-existent OIDs return proper SNMP error types [L#180]  * test Device SNMP operations non-existent OIDs return proper SNMP error types (102.4ms) [L#180]
  * test End-to-end SNMP PDU processing GETNEXT request PDU processing works correctly [L#293]  * test End-to-end SNMP PDU processing GETNEXT request PDU processing works correctly (102.8ms) [L#293]
  * test Device SNMP operations GETNEXT operations return proper next OID and value [L#101]  * test Device SNMP operations GETNEXT operations return proper next OID and value (103.1ms) [L#101]
  * test Device SNMP operations GET operation returns proper SNMP data types [L#43]  * test Device SNMP operations GET operation returns proper SNMP data types (102.4ms) [L#43]
  * test Device SNMP operations interface table OIDs return proper SNMP types [L#129]  * test Device SNMP operations interface table OIDs return proper SNMP types (102.5ms) [L#129]

  5) test Device SNMP operations interface table OIDs return proper SNMP types (SnmpSim.SNMPOperationsTest)
     test/snmp_sim/snmp_operations_test.exs:129
     1.3.6.1.2.1.2.2.1.4.1 should return gauge32 tuple, got: 1500
     code: for {oid, expected_type} <- interface_oids do
     stacktrace:
       test/snmp_sim/snmp_operations_test.exs:162: anonymous fn/3 in SnmpSim.SNMPOperationsTest."test Device SNMP operations interface table OIDs return proper SNMP types"/1
       (elixir 1.18.3) lib/enum.ex:2546: Enum."-reduce/3-lists^foldl/2-0-"/3
       test/snmp_sim/snmp_operations_test.exs:149: (test)

  * test End-to-end SNMP PDU processing GET request PDU processing returns proper response [L#232]  * test End-to-end SNMP PDU processing GET request PDU processing returns proper response (101.7ms) [L#232]

SnmpSim.SnmpVersionCompatibilityTest [test/snmp_sim/snmp_version_compatibility_test.exs]
  * test SNMP Version Compatibility SNMPv2c GET request returns v2c response [L#58]  * test SNMP Version Compatibility SNMPv2c GET request returns v2c response (1.4ms) [L#58]
  * test SNMP Version Compatibility SNMPv2c GETBULK request returns v2c response [L#125]  * test SNMP Version Compatibility SNMPv2c GETBULK request returns v2c response (0.8ms) [L#125]
  * test Counter32/Gauge32 Type Handling by Version SNMPv1 returns Counter32 values correctly [L#179]  * test Counter32/Gauge32 Type Handling by Version SNMPv1 returns Counter32 values correctly (0.7ms) [L#179]
  * test SNMP Version Compatibility SNMPv1 GETNEXT request returns v1 response [L#87]  * test SNMP Version Compatibility SNMPv1 GETNEXT request returns v1 response (0.5ms) [L#87]
  * test SNMP Version Compatibility SNMPv1 GET request returns v1 response [L#29]  * test SNMP Version Compatibility SNMPv1 GET request returns v1 response (0.5ms) [L#29]
  * test SNMP Version Compatibility SNMPv2c GETNEXT request returns v2c response [L#106]  * test SNMP Version Compatibility SNMPv2c GETNEXT request returns v2c response (0.5ms) [L#106]
  * test SNMP Version Compatibility device handles different community strings correctly [L#146]  * test SNMP Version Compatibility device handles different community strings correctly (0.5ms) [L#146]
  * test Counter32/Gauge32 Type Handling by Version SNMPv2c returns Counter32 values correctly [L#201]  * test Counter32/Gauge32 Type Handling by Version SNMPv2c returns Counter32 values correctly (0.4ms) [L#201]

SnmpSimProductionValidationTest [test/snmp_sim_production_validation_test.exs]
  * test meets performance requirements under sustained load [L#125]  * test meets performance requirements under sustained load (excluded) [L#125]
  * test monitoring and alerting systems function correctly [L#305]  * test monitoring and alerting systems function correctly (excluded) [L#305]
  * test integrates correctly with external systems [L#390]  * test integrates correctly with external systems (excluded) [L#390]
  * test maintains 99.9% uptime under realistic conditions [L#194]  * test maintains 99.9% uptime under realistic conditions (excluded) [L#194]
  * test meets minimum device capacity requirement (10000 devices) [L#67]  * test meets minimum device capacity requirement (10000 devices) (excluded) [L#67]
  * test meets security requirements and handles attack scenarios [L#264]  * test meets security requirements and handles attack scenarios (excluded) [L#264]
  * test deployment and operational procedures work correctly [L#348]  * test deployment and operational procedures work correctly (excluded) [L#348]

SnmpSim.MultiDeviceStartupTest [test/snmp_sim/multi_device_startup_test.exs]
  * test predefined device mixes starts cable network mix [L#151]  * test predefined device mixes starts cable network mix (excluded) [L#151]
  * test predefined device mixes starts enterprise network mix [L#171]  * test predefined device mixes starts enterprise network mix (excluded) [L#171]
  * test device population startup handles empty device specs [L#54]  * test device population startup handles empty device specs (0.4ms) [L#54]
  * test startup status and monitoring provides startup status information [L#242]  * test startup status and monitoring provides startup status information (0.9ms) [L#242]
  * test predefined device mixes starts test mixes for development [L#192]  * test predefined device mixes starts test mixes for development (16.3ms) [L#192]
  * test startup status and monitoring console progress callback works [L#297]  * test startup status and monitoring console progress callback works (0.8ms) [L#297]
  * test concurrent startup operations handles concurrent startup requests [L#416]  * test concurrent startup operations handles concurrent startup requests (0.5ms) [L#416]
  * test device population shutdown shuts down entire device population [L#316]  * test device population shutdown shuts down entire device population (0.8ms) [L#316]
  * test error handling and recovery validates port assignment conflicts [L#365]  * test error handling and recovery validates port assignment conflicts (1.4ms) [L#365]
  * test pre-warming functionality pre-warms devices for immediate availability [L#221]  * test pre-warming functionality pre-warms devices for immediate availability (0.5ms) [L#221]
  * test device population startup respects parallel worker limits [L#99]  * test device population startup respects parallel worker limits (1.1ms) [L#99]
  * test device population startup validates device specs with invalid types [L#66]  * test device population startup validates device specs with invalid types (0.3ms) [L#66]
  * test startup status and monitoring tracks startup progress with callback [L#266]  * test startup status and monitoring tracks startup progress with callback (101.1ms) [L#266]
  * test device population startup starts small device population successfully [L#30]  * test device population startup starts small device population successfully (1.2ms) [L#30]
  * test device population startup detects insufficient ports [L#80]  * test device population startup detects insufficient ports (0.4ms) [L#80]
  * test device population startup handles timeout scenarios gracefully [L#127]  * test device population startup handles timeout scenarios gracefully (0.6ms) [L#127]
  * test startup with progress reporting starts with console progress reporting [L#399]  * test startup with progress reporting starts with console progress reporting (0.8ms) [L#399]
  * test error handling and recovery handles partial failures gracefully [L#343]  * test error handling and recovery handles partial failures gracefully (0.6ms) [L#343]

SnmpSimTest [test/snmp_sim_test.exs]
  * test Main Module API start_device_population creates multiple devices [L#59]  * test Main Module API start_device_population creates multiple devices (0.7ms) [L#59]
  * test Main Module API handles errors gracefully [L#90]  * test Main Module API handles errors gracefully (0.4ms) [L#90]
  * test Main Module API starts device with profile successfully [L#31]  * test Main Module API starts device with profile successfully (0.3ms) [L#31]
  * test Module Documentation has proper module documentation [L#116]  * test Module Documentation has proper module documentation (1.5ms) [L#116]

SnmpSim.Phase5IntegrationTest [test/snmp_sim_phase5_integration_test.exs]
  * test Phase 5 Realistic Value Simulation Integration gauge simulation integrates time patterns and correlations [L#79]  * test Phase 5 Realistic Value Simulation Integration gauge simulation integrates time patterns and correlations (0.3ms) [L#79]
  * test Phase 5 Integration with Existing Components value simulation works with OID tree and profiles [L#602]  * test Phase 5 Integration with Existing Components value simulation works with OID tree and profiles (0.2ms) [L#602]
  * test Phase 5 Realistic Value Simulation Integration seasonal and weather patterns integration [L#493]  * test Phase 5 Realistic Value Simulation Integration seasonal and weather patterns integration (0.3ms) [L#493]
  * test Phase 5 Realistic Value Simulation Integration jitter patterns produce expected characteristics [L#531]  * test Phase 5 Realistic Value Simulation Integration jitter patterns produce expected characteristics (0.3ms) [L#531]
  * test Phase 5 Realistic Value Simulation Integration time patterns integration across daily cycle [L#243]  * test Phase 5 Realistic Value Simulation Integration time patterns integration across daily cycle (0.2ms) [L#243]
  * test Phase 5 Realistic Value Simulation Integration counter wrapping behavior across device types [L#393]  * test Phase 5 Realistic Value Simulation Integration counter wrapping behavior across device types (0.2ms) [L#393]
  * test Phase 5 Realistic Value Simulation Integration signal quality simulation with environmental correlations [L#121]  * test Phase 5 Realistic Value Simulation Integration signal quality simulation with environmental correlations (0.2ms) [L#121]
  * test Phase 5 Integration with Existing Components correlation engine works with multiple simultaneous correlations [L#649]  * test Phase 5 Integration with Existing Components correlation engine works with multiple simultaneous correlations (3.2ms) [L#649]
  * test Phase 5 Realistic Value Simulation Integration complete traffic counter simulation with all Phase 5 features [L#16]  * test Phase 5 Realistic Value Simulation Integration complete traffic counter simulation with all Phase 5 features (0.2ms) [L#16]
  * test Phase 5 Realistic Value Simulation Integration error counter correlation with utilization and signal quality [L#167]  * test Phase 5 Realistic Value Simulation Integration error counter correlation with utilization and signal quality (0.3ms) [L#167]
  * test Phase 5 Realistic Value Simulation Integration correlation engine integration with device state [L#303]  * test Phase 5 Realistic Value Simulation Integration correlation engine integration with device state (0.3ms) [L#303]
  * test Phase 5 Realistic Value Simulation Integration performance with realistic device simulation [L#437]Phase 5 simulation performance: 2.1ms for 1000 simulations
Average per simulation: 0.002ms
  * test Phase 5 Realistic Value Simulation Integration performance with realistic device simulation (2.4ms) [L#437]

SnmpSim.TimePatternsTest [test/snmp_sim/time_patterns_test.exs]
  * test Daily Utilization Patterns returns high utilization during business hours [L#16]  * test Daily Utilization Patterns returns high utilization during business hours (0.3ms) [L#16]
  * test Weather Impact Simulation returns weather impact factors [L#139]  * test Weather Impact Simulation returns weather impact factors (0.2ms) [L#139]
  * test Temperature Patterns returns seasonal temperature variations [L#100]  * test Temperature Patterns returns seasonal temperature variations (0.2ms) [L#100]
  * test Seasonal Variations applies equipment stress patterns [L#174]  * test Seasonal Variations applies equipment stress patterns (0.2ms) [L#174]
  * test Edge Cases and Robustness handles boundary times correctly [L#274]  * test Edge Cases and Robustness handles boundary times correctly (0.2ms) [L#274]
  * test Seasonal Variations applies power consumption patterns [L#191]  * test Seasonal Variations applies power consumption patterns (0.2ms) [L#191]
  * test Interface Traffic Rates returns appropriate rates for different interface types [L#229]  * test Interface Traffic Rates returns appropriate rates for different interface types (0.2ms) [L#229]
  * test Temperature Patterns returns daily temperature variations [L#118]  * test Temperature Patterns returns daily temperature variations (0.1ms) [L#118]
  * test Weekly Pattern Variations returns full pattern for weekdays [L#51]  * test Weekly Pattern Variations returns full pattern for weekdays (0.2ms) [L#51]
  * test Weekly Pattern Variations returns lowest pattern for Sunday [L#71]  * test Weekly Pattern Variations returns lowest pattern for Sunday (0.2ms) [L#71]
  * test Daily Utilization Patterns returns peak utilization during evening hours [L#26]  * test Daily Utilization Patterns returns peak utilization during evening hours (0.2ms) [L#26]
  * test Edge Cases and Robustness produces consistent results for same input [L#297]  * test Edge Cases and Robustness produces consistent results for same input (0.1ms) [L#297]
  * test Weather Impact Simulation varies weather probability by season [L#156]  * test Weather Impact Simulation varies weather probability by season (0.1ms) [L#156]
  * test Daily Utilization Patterns returns low utilization during early morning hours [L#7]  * test Daily Utilization Patterns returns low utilization during early morning hours (0.1ms) [L#7]
  * test Daily Utilization Patterns handles smooth transitions between time periods [L#37]  * test Daily Utilization Patterns handles smooth transitions between time periods (0.1ms) [L#37]
  * test Weekly Pattern Variations returns reduced pattern for Saturday [L#61]  * test Weekly Pattern Variations returns reduced pattern for Saturday (0.1ms) [L#61]
  * test Interface Traffic Rates applies time-based factors to traffic rates [L#256]  * test Interface Traffic Rates applies time-based factors to traffic rates (0.2ms) [L#256]
  * test Weekly Pattern Variations varies by day of week for weekdays [L#81]  * test Weekly Pattern Variations varies by day of week for weekdays (0.1ms) [L#81]
  * test Seasonal Variations applies generic seasonal patterns [L#208]  * test Seasonal Variations applies generic seasonal patterns (0.2ms) [L#208]
  * test Edge Cases and Robustness handles leap year dates correctly [L#287]  * test Edge Cases and Robustness handles leap year dates correctly (0.2ms) [L#287]

SnmpSim.CorrelationEngineTest [test/snmp_sim/correlation_engine_test.exs]
  * test apply_correlations/5 handles missing secondary metrics gracefully [L#37]  * test apply_correlations/5 handles missing secondary metrics gracefully (0.2ms) [L#37]
  * test calculate_signal_throughput_correlation/3 calculates throughput based on excellent signal quality [L#210]  * test calculate_signal_throughput_correlation/3 calculates throughput based on excellent signal quality (0.1ms) [L#210]
  * test get_device_correlations/1 returns server correlations [L#177]  * test get_device_correlations/1 returns server correlations (0.1ms) [L#177]
  * test calculate_signal_throughput_correlation/3 handles marginal signal conditions [L#248]  * test calculate_signal_throughput_correlation/3 handles marginal signal conditions (0.1ms) [L#248]
  * test calculate_power_consumption_correlation/2 varies power consumption by device type [L#415]  * test calculate_power_consumption_correlation/2 varies power consumption by device type (0.1ms) [L#415]
  * test calculate_temperature_performance_correlation/2 reduces performance at high temperatures [L#345]  * test calculate_temperature_performance_correlation/2 reduces performance at high temperatures (0.1ms) [L#345]
  * test calculate_power_consumption_correlation/2 includes cooling power for high temperatures [L#476]  * test calculate_power_consumption_correlation/2 includes cooling power for high temperatures (0.1ms) [L#476]
  * test calculate_utilization_error_correlation/2 increases error rates with higher utilization [L#269]  * test calculate_utilization_error_correlation/2 increases error rates with higher utilization (0.2ms) [L#269]
  * test calculate_utilization_error_correlation/2 caps error rates at reasonable maximum [L#317]  * test calculate_utilization_error_correlation/2 caps error rates at reasonable maximum (0.2ms) [L#317]
  * test integration and performance correlations work together without conflicts [L#507]  * test integration and performance correlations work together without conflicts (0.1ms) [L#507]
  * test get_device_correlations/1 returns generic correlations for unknown device types [L#192]  * test get_device_correlations/1 returns generic correlations for unknown device types (0.1ms) [L#192]
  * test get_device_correlations/1 returns MTA correlations [L#116]  * test get_device_correlations/1 returns MTA correlations (0.2ms) [L#116]
  * test get_device_correlations/1 returns router correlations [L#147]  * test get_device_correlations/1 returns router correlations (0.1ms) [L#147]
  * test apply_correlations/5 processes multiple correlations for single primary metric [L#62]  * test apply_correlations/5 processes multiple correlations for single primary metric (0.1ms) [L#62]
  * test calculate_temperature_performance_correlation/2 handles extreme temperatures [L#378]  * test calculate_temperature_performance_correlation/2 handles extreme temperatures (0.2ms) [L#378]
  * test calculate_signal_throughput_correlation/3 reduces throughput for poor signal quality [L#229]  * test calculate_signal_throughput_correlation/3 reduces throughput for poor signal quality (0.1ms) [L#229]
  * test apply_correlations/5 applies correlations between related metrics [L#6]  * test apply_correlations/5 applies correlations between related metrics (0.2ms) [L#6]
  * test get_device_correlations/1 returns cable modem correlations [L#100]  * test get_device_correlations/1 returns cable modem correlations (0.1ms) [L#100]
  * test get_device_correlations/1 returns switch correlations [L#132]  * test get_device_correlations/1 returns switch correlations (0.1ms) [L#132]
  * test integration and performance signal throughput calculations handle edge cases [L#576]  * test integration and performance signal throughput calculations handle edge cases (0.1ms) [L#576]
  * test calculate_power_consumption_correlation/2 increases power with CPU and network activity [L#447]  * test calculate_power_consumption_correlation/2 increases power with CPU and network activity (0.1ms) [L#447]
  * test calculate_temperature_performance_correlation/2 calculates impact for cable modem at optimal temperature [L#331]  * test calculate_temperature_performance_correlation/2 calculates impact for cable modem at optimal temperature (0.1ms) [L#331]
  * test get_device_correlations/1 returns CMTS correlations [L#162]  * test get_device_correlations/1 returns CMTS correlations (0.1ms) [L#162]
  * test calculate_utilization_error_correlation/2 applies different base error rates by interface type [L#289]  * test calculate_utilization_error_correlation/2 applies different base error rates by interface type (0.1ms) [L#289]
  * test integration and performance correlation calculations are efficient [L#552]  * test integration and performance correlation calculations are efficient (0.2ms) [L#552]
  * test calculate_temperature_performance_correlation/2 handles different equipment types appropriately [L#358]  * test calculate_temperature_performance_correlation/2 handles different equipment types appropriately (0.1ms) [L#358]
  * test calculate_power_consumption_correlation/2 calculates power based on device metrics [L#393]  * test calculate_power_consumption_correlation/2 calculates power based on device metrics (0.1ms) [L#393]

SnmpSim.GetbulkEndOfMibTest [test/snmp_sim/getbulk_end_of_mib_test.exs]
  * test OID progression fixes get_next_oid on last OID returns end_of_mib [L#58]  * test OID progression fixes get_next_oid on last OID returns end_of_mib (0.6ms) [L#58]
  * test edge cases and regression tests problematic OID 1.3.6.1.2.1.2.2.1.21.1 does not loop [L#264]  * test edge cases and regression tests problematic OID 1.3.6.1.2.1.2.2.1.21.1 does not loop (0.6ms) [L#264]
  * test SNMP protocol compliance SNMP GETBULK walk terminates correctly [L#203]  * test SNMP protocol compliance SNMP GETBULK walk terminates correctly (6580.4ms) [L#203]

  6) test SNMP protocol compliance SNMP GETBULK walk terminates correctly (SnmpSim.GetbulkEndOfMibTest)
     test/snmp_sim/getbulk_end_of_mib_test.exs:203
     Walk output should contain OIDs
     code: assert String.contains?(output, "1.3.6.1"), "Walk output should contain OIDs"
     stacktrace:
       test/snmp_sim/getbulk_end_of_mib_test.exs:216: (test)

     The following output was logged:
     [error] Error processing SNMP packet: %ArgumentError{message: "errors were found at the given arguments:\n\n  * 1st argument: not a textual representation of an integer\n"}
     [error] Error processing SNMP packet: %ArgumentError{message: "errors were found at the given arguments:\n\n  * 1st argument: not a textual representation of an integer\n"}
     [error] Error processing SNMP packet: %ArgumentError{message: "errors were found at the given arguments:\n\n  * 1st argument: not a textual representation of an integer\n"}
     [error] Error processing SNMP packet: %ArgumentError{message: "errors were found at the given arguments:\n\n  * 1st argument: not a textual representation of an integer\n"}
     [error] Error processing SNMP packet: %ArgumentError{message: "errors were found at the given arguments:\n\n  * 1st argument: not a textual representation of an integer\n"}
     [error] Error processing SNMP packet: %ArgumentError{message: "errors were found at the given arguments:\n\n  * 1st argument: not a textual representation of an integer\n"}
     
  * test edge cases and regression tests large GETBULK requests don't cause issues [L#290]  * test edge cases and regression tests large GETBULK requests don't cause issues (30.9ms) [L#290]
  * test SNMP protocol compliance SNMP GETNEXT progression works correctly [L#223]  * test SNMP protocol compliance SNMP GETNEXT progression works correctly (556.7ms) [L#223]

  7) test SNMP protocol compliance SNMP GETNEXT progression works correctly (SnmpSim.GetbulkEndOfMibTest)
     test/snmp_sim/getbulk_end_of_mib_test.exs:223
     GETNEXT should return at least some OIDs
     code: assert MapSet.size(visited_oids) > 0, "GETNEXT should return at least some OIDs"
     stacktrace:
       test/snmp_sim/getbulk_end_of_mib_test.exs:259: (test)

  * test GETBULK collection fixes get_bulk_oids from second-to-last OID returns only last OID [L#97]  * test GETBULK collection fixes get_bulk_oids from second-to-last OID returns only last OID (1.4ms) [L#97]
  * test GETBULK collection fixes get_bulk_oids simulates complete walk without infinite loops [L#127]GETBULK walk completed in 6 iterations, collected 50 OIDs
  * test GETBULK collection fixes get_bulk_oids simulates complete walk without infinite loops (20.9ms) [L#127]
  * test OID progression fixes get_next_oid progression covers all OIDs without loops [L#62]  * test OID progression fixes get_next_oid progression covers all OIDs without loops (14.2ms) [L#62]
  * test edge cases and regression tests empty walk file handling [L#278]  * test edge cases and regression tests empty walk file handling (0.1ms) [L#278]
  * test OID progression fixes get_next_oid does not return same OID (fixes infinite loop) [L#38]  * test OID progression fixes get_next_oid does not return same OID (fixes infinite loop) (2.8ms) [L#38]
  * test GETBULK collection fixes get_bulk_oids from last OID returns empty list [L#92]  * test GETBULK collection fixes get_bulk_oids from last OID returns empty list (0.3ms) [L#92]
  * test GETBULK collection fixes get_bulk_oids does not include starting OID in results [L#105]  * test GETBULK collection fixes get_bulk_oids does not include starting OID in results (5.2ms) [L#105]
  * test SNMP protocol compliance SNMP GETBULK from last OID returns endOfMibView [L#183]  * test SNMP protocol compliance SNMP GETBULK from last OID returns endOfMibView (552.4ms) [L#183]

  8) test SNMP protocol compliance SNMP GETBULK from last OID returns endOfMibView (SnmpSim.GetbulkEndOfMibTest)
     test/snmp_sim/getbulk_end_of_mib_test.exs:183
     SNMP command failed: -Cn0: Unknown Object Identifier (Sub-id not found: (top) -> -Cn0)

     code: assert exit_code == 0, "SNMP command failed: #{output}"
     stacktrace:
       test/snmp_sim/getbulk_end_of_mib_test.exs:191: (test)


SnmpSim.ProfileLoaderTest [test/snmp_sim/profile_loader_test.exs]
  * test Profile Loading starts device with walk-based profile [L#21]  * test Profile Loading starts device with walk-based profile (1.3ms) [L#21]
  * test OID Tree Operations finds next OID for non-existent starting OID [L#156]  * test OID Tree Operations finds next OID for non-existent starting OID (1.5ms) [L#156]
  * test OID Tree Operations finds next OID correctly [L#136]  * test OID Tree Operations finds next OID correctly (1.5ms) [L#136]
  * test Profile Behaviors includes metadata about loading [L#186]  * test Profile Behaviors includes metadata about loading (1.2ms) [L#186]
  * test Unsupported Features returns error for compiled MIB sources (not yet implemented) [L#204]  * test Unsupported Features returns error for compiled MIB sources (not yet implemented) (1.3ms) [L#204]
  * test OID Tree Operations handles end of MIB correctly [L#148]  * test OID Tree Operations handles end of MIB correctly (1.6ms) [L#148]
  * test Profile Loading loads numeric OID walk files [L#61]  * test Profile Loading loads numeric OID walk files (0.6ms) [L#61]
  * test Profile Loading handles file read errors gracefully [L#105]  * test Profile Loading handles file read errors gracefully (0.1ms) [L#105]
  * test Profile Loading responds to SNMP GET with walk file values [L#33]  * test Profile Loading responds to SNMP GET with walk file values (1.0ms) [L#33]
  * test Profile Behaviors loads profile with behaviors specified [L#170]  * test Profile Behaviors loads profile with behaviors specified (0.3ms) [L#170]
  * test Profile Loading loads walk file into device profile [L#7]  * test Profile Loading loads walk file into device profile (1.0ms) [L#7]
  * test Profile Loading handles missing OIDs with noSuchName [L#50]  * test Profile Loading handles missing OIDs with noSuchName (1.0ms) [L#50]
  * test Profile Loading loads manual definitions correctly [L#80]  * test Profile Loading loads manual definitions correctly (0.1ms) [L#80]
  * test OID Tree Operations maintains lexicographic order for GETNEXT [L#127]  * test OID Tree Operations maintains lexicographic order for GETNEXT (1.2ms) [L#127]
  * test Unsupported Features returns error for unsupported source types [L#214]  * test Unsupported Features returns error for unsupported source types (0.1ms) [L#214]

SnmpSimErlangSnmpIntegrationTest [test/snmp_sim_erlang_snmp_integration_test.exs]
  * test Integration with Erlang SNMP Manager Erlang SNMP manager can perform GETNEXT operations [L#102]  * test Integration with Erlang SNMP Manager Erlang SNMP manager can perform GETNEXT operations (excluded) [L#102]
  * test Integration with Erlang SNMP Manager Erlang SNMP can retrieve string values correctly [L#351]  * test Integration with Erlang SNMP Manager Erlang SNMP can retrieve string values correctly (excluded) [L#351]
  * test Integration with Erlang SNMP Manager Erlang SNMP concurrent requests work properly [L#299]  * test Integration with Erlang SNMP Manager Erlang SNMP concurrent requests work properly (excluded) [L#299]
  * test Integration with Erlang SNMP Manager Erlang SNMP timeout handling works [L#441]  * test Integration with Erlang SNMP Manager Erlang SNMP timeout handling works (excluded) [L#441]
  * test Protocol Compliance and Edge Cases Erlang SNMP validates SNMP packet structure [L#515]  * test Protocol Compliance and Edge Cases Erlang SNMP validates SNMP packet structure (excluded) [L#515]
  * test Integration with Erlang SNMP Manager Erlang SNMP handles counter values correctly [L#327]  * test Integration with Erlang SNMP Manager Erlang SNMP handles counter values correctly (excluded) [L#327]
  * test Integration with Erlang SNMP Manager Erlang SNMP handles lexicographic ordering correctly [L#178]  * test Integration with Erlang SNMP Manager Erlang SNMP handles lexicographic ordering correctly (excluded) [L#178]
  * test Integration with Erlang SNMP Manager Erlang SNMP handles end of MIB correctly [L#240]  * test Integration with Erlang SNMP Manager Erlang SNMP handles end of MIB correctly (excluded) [L#240]
  * test Integration with Erlang SNMP Manager Erlang SNMP manager can perform GETBULK operations [L#124]  * test Integration with Erlang SNMP Manager Erlang SNMP manager can perform GETBULK operations (excluded) [L#124]
  * test Integration with Erlang SNMP Manager Erlang SNMP handles SNMPv1 vs v2c correctly [L#391]  * test Integration with Erlang SNMP Manager Erlang SNMP handles SNMPv1 vs v2c correctly (excluded) [L#391]
  * test Integration with Erlang SNMP Manager Erlang SNMP manager can perform GET operations [L#83]  * test Integration with Erlang SNMP Manager Erlang SNMP manager can perform GET operations (excluded) [L#83]
  * test Integration with Erlang SNMP Manager Erlang SNMP GETBULK with non-repeaters [L#149]  * test Integration with Erlang SNMP Manager Erlang SNMP GETBULK with non-repeaters (excluded) [L#149]
  * test Integration with Erlang SNMP Manager Erlang SNMP can walk large interface tables efficiently [L#215]  * test Integration with Erlang SNMP Manager Erlang SNMP can walk large interface tables efficiently (excluded) [L#215]
  * test Integration with Erlang SNMP Manager Erlang SNMP handles invalid community strings [L#261]  * test Integration with Erlang SNMP Manager Erlang SNMP handles invalid community strings (excluded) [L#261]
  * test Protocol Compliance and Edge Cases Erlang SNMP validates BER encoding [L#537]  * test Protocol Compliance and Edge Cases Erlang SNMP validates BER encoding (excluded) [L#537]

SnmpSim.GetbulkRegressionTest [test/snmp_sim/getbulk_regression_test.exs]
  * test GETBULK end-of-MIB regression tests get_bulk_oids from broad OID does not hang [L#43]✓ GETBULK from 1.3.6.1 returned 10 OIDs in 3ms
  * test GETBULK end-of-MIB regression tests get_bulk_oids from broad OID does not hang (3.2ms) [L#43]
  * test End-of-MIB handling GETBULK at end of MIB returns empty list [L#143]✓ GETBULK from last OID 1.3.6.1.2.1.2.2.1.21.2 correctly returned empty list
  * test End-of-MIB handling GETBULK at end of MIB returns empty list (14.3ms) [L#143]
  * test GETBULK end-of-MIB regression tests get_bulk_oids simulates walk without infinite loops [L#71]✓ GETBULK walk completed: 11 iterations, 50 OIDs, 16ms
  * test GETBULK end-of-MIB regression tests get_bulk_oids simulates walk without infinite loops (16.1ms) [L#71]
  * test GETBULK end-of-MIB regression tests get_next_oid does not return same OID (infinite loop fix) [L#25]✓ get_next_oid(1.3.6.1.2.1.2.2.1.21.1) = 1.3.6.1.2.1.2.2.1.21.2 (different OID)
  * test GETBULK end-of-MIB regression tests get_next_oid does not return same OID (infinite loop fix) (0.4ms) [L#25]
  * test GETBULK end-of-MIB regression tests get_bulk_oids does not include starting OID [L#118]✓ GETBULK from 1.3.6.1.2.1.1.1.0 correctly excluded starting OID
  * test GETBULK end-of-MIB regression tests get_bulk_oids does not include starting OID (1.5ms) [L#118]
  * test Performance and stability repeated GETBULK calls are stable [L#178]✓ 5 repeated GETBULK calls returned consistent results
  * test Performance and stability repeated GETBULK calls are stable (4.9ms) [L#178]

SnmpSimShellIntegrationTest [test/snmp_sim_shell_integration_test.exs]
  * test Shell Command Integration snmpwalk command attempts to connect to our simulator [L#92]  * test Shell Command Integration snmpwalk command attempts to connect to our simulator (excluded) [L#92]
  * test Performance with Shell Tools UDP server responds to connection attempts [L#246]  * test Performance with Shell Tools UDP server responds to connection attempts (excluded) [L#246]
  * test Shell Command Integration snmpbulkwalk command attempts to connect to our simulator [L#131]  * test Shell Command Integration snmpbulkwalk command attempts to connect to our simulator (excluded) [L#131]
  * test Shell Command Integration snmpget command works with our simulator [L#52]  * test Shell Command Integration snmpget command works with our simulator (excluded) [L#52]
  * test Shell Command Integration net-snmp tools can contact our simulator [L#178]  * test Shell Command Integration net-snmp tools can contact our simulator (excluded) [L#178]

SnmpSim.MIB.BehaviorAnalyzerTest [test/snmp_sim/mib/behavior_analyzer_test.exs]
  * test Object Behavior Analysis identifies packet counters and correlates with octets [L#23]  * test Object Behavior Analysis identifies packet counters and correlates with octets (0.1ms) [L#23]
  * test MIB Behavior Analysis analyzes complete MIB object set [L#142]  * test MIB Behavior Analysis analyzes complete MIB object set (0.1ms) [L#142]
  * test Object Name Extraction extracts object names from common OIDs [L#174]  * test Object Name Extraction extracts object names from common OIDs (0.1ms) [L#174]
  * test Object Behavior Analysis identifies power level gauges with environmental correlation [L#71]  * test Object Behavior Analysis identifies power level gauges with environmental correlation (0.1ms) [L#71]
  * test Walk File Enhancement enhances walk file data with intelligent behaviors [L#105]  * test Walk File Enhancement enhances walk file data with intelligent behaviors (0.1ms) [L#105]
  * test Object Behavior Analysis identifies error counters with appropriate rates [L#39]  * test Object Behavior Analysis identifies error counters with appropriate rates (0.1ms) [L#39]
  * test Object Behavior Analysis identifies traffic counters by name [L#7]  * test Object Behavior Analysis identifies traffic counters by name (0.1ms) [L#7]
  * test Object Behavior Analysis identifies SNR gauges with inverse utilization pattern [L#55]  * test Object Behavior Analysis identifies SNR gauges with inverse utilization pattern (0.1ms) [L#55]
  * test Object Behavior Analysis identifies system uptime with proper increment rate [L#87]  * test Object Behavior Analysis identifies system uptime with proper increment rate (0.1ms) [L#87]
  * test Walk File Enhancement handles unknown OIDs gracefully [L#128]  * test Walk File Enhancement handles unknown OIDs gracefully (0.1ms) [L#128]

SnmpSim.TestScenariosTest [test/snmp_sim/test_scenarios_test.exs]
  * test network outage scenarios creates gradual recovery scenario [L#69]  * test network outage scenarios creates gradual recovery scenario (skipped) [L#69]
  * test device flapping scenarios creates irregular flapping pattern [L#189]  * test device flapping scenarios creates irregular flapping pattern (skipped) [L#189]
  * test high load scenarios creates cascade high load scenario [L#163]  * test high load scenarios creates cascade high load scenario (skipped) [L#163]
  * test cascading failure scenarios creates cascading failure scenario [L#212]  * test cascading failure scenarios creates cascading failure scenario (skipped) [L#212]
  * test scenario ID generation generates unique scenario IDs [L#352]  * test scenario ID generation generates unique scenario IDs (skipped) [L#352]
  * test environmental scenarios creates interference scenario [L#284]  * test environmental scenarios creates interference scenario (skipped) [L#284]
  * test scenario validation validates percentage parameters [L#382]  * test scenario validation validates percentage parameters (skipped) [L#382]
  * test cascading failure scenarios calculates cascade duration correctly with small device count [L#227]  * test cascading failure scenarios calculates cascade duration correctly with small device count (skipped) [L#227]
  * test environmental scenarios creates power scenario with severe severity [L#258]  * test environmental scenarios creates power scenario with severe severity (skipped) [L#258]
  * test scenario validation handles zero duration scenarios [L#396]  * test scenario validation handles zero duration scenarios (skipped) [L#396]
  * test device flapping scenarios creates regular flapping pattern [L#175]  * test device flapping scenarios creates regular flapping pattern (skipped) [L#175]
  * test signal degradation scenarios creates fluctuating signal degradation [L#111]  * test signal degradation scenarios creates fluctuating signal degradation (skipped) [L#111]
  * test high load scenarios creates steady high load scenario [L#136]  * test high load scenarios creates steady high load scenario (skipped) [L#136]
  * test network outage scenarios creates sporadic outage scenario [L#82]  * test network outage scenarios creates sporadic outage scenario (skipped) [L#82]
  * test multi-scenario tests handles empty scenario list [L#329]  * test multi-scenario tests handles empty scenario list (skipped) [L#329]
  * test device flapping scenarios creates degrading flapping pattern [L#199]  * test device flapping scenarios creates degrading flapping pattern (skipped) [L#199]
  * test network outage scenarios creates network outage scenario with immediate recovery [L#44]  * test network outage scenarios creates network outage scenario with immediate recovery (skipped) [L#44]
  * test signal degradation scenarios creates steady signal degradation [L#96]  * test signal degradation scenarios creates steady signal degradation (skipped) [L#96]
  * test signal degradation scenarios creates progressive signal degradation [L#123]  * test signal degradation scenarios creates progressive signal degradation (skipped) [L#123]
  * test scenario validation handles empty device list gracefully [L#372]  * test scenario validation handles empty device list gracefully (skipped) [L#372]
  * test environmental scenarios creates temperature scenario [L#271]  * test environmental scenarios creates temperature scenario (skipped) [L#271]
  * test high load scenarios creates bursty high load scenario [L#150]  * test high load scenarios creates bursty high load scenario (skipped) [L#150]
  * test environmental scenarios creates weather scenario with mild severity [L#244]  * test environmental scenarios creates weather scenario with mild severity (skipped) [L#244]
  * test multi-scenario tests creates multiple concurrent scenarios [L#298]  * test multi-scenario tests creates multiple concurrent scenarios (skipped) [L#298]
  * test multi-scenario tests stagger scenario start times [L#334]  * test multi-scenario tests stagger scenario start times (skipped) [L#334]

SnmpSim.WalkParserTest [test/snmp_sim/walk_parser_test.exs]
  * test Walk File Parsing parses numeric OID format walk files (.1.3.6.1.2.1.2.2.1.10.2) [L#17]  * test Walk File Parsing parses numeric OID format walk files (.1.3.6.1.2.1.2.2.1.10.2) (0.1ms) [L#17]
  * test File Reading handles non-existent file gracefully [L#141]  * test File Reading handles non-existent file gracefully (0.1ms) [L#141]
  * test File Reading reads actual walk file successfully [L#117]  * test File Reading reads actual walk file successfully (0.3ms) [L#117]
  * test Data Type Parsing parses IP addresses correctly [L#163]  * test Data Type Parsing parses IP addresses correctly (0.1ms) [L#163]
  * test Data Type Parsing handles OID values correctly [L#171]  * test Data Type Parsing handles OID values correctly (0.09ms) [L#171]
  * test File Reading reads numeric OID walk file successfully [L#130]  * test File Reading reads numeric OID walk file successfully (0.2ms) [L#130]
  * test Walk File Parsing cleans quoted strings and hex values [L#65]  * test Walk File Parsing cleans quoted strings and hex values (0.1ms) [L#65]
  * test Walk File Parsing skips comments and empty lines [L#93]  * test Walk File Parsing skips comments and empty lines (0.09ms) [L#93]
  * test Walk File Parsing handles mixed walk file formats in same file [L#25]  * test Walk File Parsing handles mixed walk file formats in same file (0.6ms) [L#25]
  * test Data Type Parsing parses integer values correctly [L#149]  * test Data Type Parsing parses integer values correctly (0.1ms) [L#149]
  * test Walk File Parsing parses named MIB format walk files (IF-MIB::ifInOctets.2) [L#7]  * test Walk File Parsing parses named MIB format walk files (IF-MIB::ifInOctets.2) (0.09ms) [L#7]
  * test Walk File Parsing extracts data types correctly (Counter32, STRING, INTEGER) [L#49]  * test Walk File Parsing extracts data types correctly (Counter32, STRING, INTEGER) (0.1ms) [L#49]
  * test Walk File Parsing resolves basic MIB names to numeric OIDs [L#79]  * test Walk File Parsing resolves basic MIB names to numeric OIDs (0.1ms) [L#79]
  * test Walk File Parsing handles timeticks format correctly [L#107]  * test Walk File Parsing handles timeticks format correctly (0.09ms) [L#107]

SnmpSim.UdpServerIntegrationTest [test/snmp_sim/udp_server_integration_test.exs]
  * test UDP Server SNMP Version Handling server responds to SNMPv2c UDP packets with v2c format [L#66]  * test UDP Server SNMP Version Handling server responds to SNMPv2c UDP packets with v2c format (100.8ms) [L#66]
  * test UDP Server SNMP Version Handling server handles GETBULK with empty varbind list [L#379]  * test UDP Server SNMP Version Handling server handles GETBULK with empty varbind list (101.0ms) [L#379]
  * test UDP Server SNMP Version Handling server handles GETBULK with mixed valid and invalid OIDs [L#300]  * test UDP Server SNMP Version Handling server handles GETBULK with mixed valid and invalid OIDs (101.9ms) [L#300]

  9) test UDP Server SNMP Version Handling server handles GETBULK with mixed valid and invalid OIDs (SnmpSim.UdpServerIntegrationTest)
     test/snmp_sim/udp_server_integration_test.exs:300
     Expected at least one end_of_mib_view varbind, got: [{[1, 3, 6, 1, 2, 1, 2, 1, 0], :auto, 2}, {[1, 3, 6, 1, 2, 1, 2, 2, 1, 1, 1], :auto, 1}, {[1, 3, 6, 1, 2, 1, 2, 2, 1, 1, 2], :auto, 2}]
     code: assert has_end_of_mib,
     stacktrace:
       test/snmp_sim/udp_server_integration_test.exs:334: (test)

  * test UDP Server SNMP Version Handling server handles GETBULK with no_such_name in non-repeaters [L#436]  * test UDP Server SNMP Version Handling server handles GETBULK with no_such_name in non-repeaters (103.2ms) [L#436]

 10) test UDP Server SNMP Version Handling server handles GETBULK with no_such_name in non-repeaters (SnmpSim.UdpServerIntegrationTest)
     test/snmp_sim/udp_server_integration_test.exs:436
     Expected truthy, got false
     code: assert is_binary(first_value) or is_list(first_value)
     stacktrace:
       test/snmp_sim/udp_server_integration_test.exs:488: (test)

  * test UDP Server Walk Simulation simulate SNMP walk using GETNEXT sequence - SNMPv2c [L#767]  * test UDP Server Walk Simulation simulate SNMP walk using GETNEXT sequence - SNMPv2c (106.0ms) [L#767]
  * test UDP Server Varbind Format and Validation Tests server handles GETNEXT with different value types correctly [L#644]  * test UDP Server Varbind Format and Validation Tests server handles GETNEXT with different value types correctly (103.4ms) [L#644]
  * test UDP Server Varbind Format and Validation Tests server handles varbinds with different OID formats correctly [L#522]  * test UDP Server Varbind Format and Validation Tests server handles varbinds with different OID formats correctly (102.7ms) [L#522]
  * test UDP Server Varbind Format and Validation Tests server handles GETBULK requests with proper varbind format [L#577]  * test UDP Server Varbind Format and Validation Tests server handles GETBULK requests with proper varbind format (103.1ms) [L#577]
  * test UDP Server SNMP Version Handling server handles GETBULK with large max_repetitions [L#344]  * test UDP Server SNMP Version Handling server handles GETBULK with large max_repetitions (104.1ms) [L#344]
  * test UDP Server SNMP Version Handling server handles SNMPv2c GETBULK requests correctly [L#167]  * test UDP Server SNMP Version Handling server handles SNMPv2c GETBULK requests correctly (103.1ms) [L#167]
  * test UDP Server SNMP Version Handling server handles GETBULK with non_repeaters > varbind count [L#228]  * test UDP Server SNMP Version Handling server handles GETBULK with non_repeaters > varbind count (104.1ms) [L#228]
  * test UDP Server SNMP Version Handling server handles SNMPv1 GETNEXT requests correctly [L#97]  * test UDP Server SNMP Version Handling server handles SNMPv1 GETNEXT requests correctly (102.1ms) [L#97]
  * test UDP Server Varbind Format and Validation Tests server handles moderately long OID chains correctly [L#715]  * test UDP Server Varbind Format and Validation Tests server handles moderately long OID chains correctly (103.1ms) [L#715]
  * test UDP Server SNMP Version Handling server rejects wrong community string [L#408]  * test UDP Server SNMP Version Handling server rejects wrong community string (2103.1ms) [L#408]
  * test UDP Server SNMP Version Handling server responds to SNMPv1 UDP packets with v1 format [L#35]  * test UDP Server SNMP Version Handling server responds to SNMPv1 UDP packets with v1 format (103.9ms) [L#35]
  * test UDP Server SNMP Version Handling server handles SNMPv2c GETNEXT requests correctly [L#132]  * test UDP Server SNMP Version Handling server handles SNMPv2c GETNEXT requests correctly (102.8ms) [L#132]
  * test UDP Server SNMP Version Handling server handles GETBULK with max_repetitions = 0 [L#198]  * test UDP Server SNMP Version Handling server handles GETBULK with max_repetitions = 0 (103.8ms) [L#198]
  * test UDP Server Varbind Format and Validation Tests server handles non-existent OIDs gracefully [L#606]  * test UDP Server Varbind Format and Validation Tests server handles non-existent OIDs gracefully (103.5ms) [L#606]
  * test UDP Server SNMP Version Handling server handles GETBULK with end_of_mib_view results [L#259]  * test UDP Server SNMP Version Handling server handles GETBULK with end_of_mib_view results (102.7ms) [L#259]
  * test UDP Server Varbind Format and Validation Tests server handles varbinds with integer list OID format correctly [L#549]  * test UDP Server Varbind Format and Validation Tests server handles varbinds with integer list OID format correctly (102.6ms) [L#549]
  * test UDP Server Varbind Format and Validation Tests server handles standard GET request with proper varbind format [L#685]  * test UDP Server Varbind Format and Validation Tests server handles standard GET request with proper varbind format (103.2ms) [L#685]
  * test UDP Server Walk Simulation simulate SNMP walk using GETNEXT sequence - SNMPv1 [L#745]  * test UDP Server Walk Simulation simulate SNMP walk using GETNEXT sequence - SNMPv1 (104.6ms) [L#745]

Finished in 37.9 seconds (0.8s async, 37.0s sync)
583 tests, 10 failures, 67 excluded, 25 skipped
[os_mon] cpu supervisor port (cpu_sup): Erlang has closed
[os_mon] memory supervisor port (memsup): Erlang has closed
